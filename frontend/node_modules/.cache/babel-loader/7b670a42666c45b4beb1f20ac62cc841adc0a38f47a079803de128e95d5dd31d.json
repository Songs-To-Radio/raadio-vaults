{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _awaitAsyncGenerator = require(\"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\nvar _wrapAsyncGenerator = require(\"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\nvar _asyncIterator = require(\"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\nvar batch = require('it-batch');\n\n/**\n * @template T\n * @typedef {{ok:true, value:T}} Success\n */\n\n/**\n * @typedef {{ok:false, err:Error}} Failure\n */\n\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n *\n * @template T\n * @param {AsyncIterable<() => Promise<T>>|Iterable<() => Promise<T>>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T>}\n */\nfunction parallelBatch(_x) {\n  return _parallelBatch.apply(this, arguments);\n}\nfunction _parallelBatch() {\n  _parallelBatch = _wrapAsyncGenerator(function (source) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, tasks, things, i, result;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 2;\n              _iterator = _asyncIterator(batch(source, size));\n            case 4:\n              _context.next = 6;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 6:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 26;\n                break;\n              }\n              tasks = _step.value;\n              /** @type {Promise<Success<T>|Failure>[]} */\n              things = tasks.map(\n              /**\n               * @param {() => Promise<T>} p\n               */\n              function (p) {\n                return p().then(function (value) {\n                  return {\n                    ok: true,\n                    value: value\n                  };\n                }, function (err) {\n                  return {\n                    ok: false,\n                    err: err\n                  };\n                });\n              });\n              i = 0;\n            case 10:\n              if (!(i < things.length)) {\n                _context.next = 23;\n                break;\n              }\n              _context.next = 13;\n              return _awaitAsyncGenerator(things[i]);\n            case 13:\n              result = _context.sent;\n              if (!result.ok) {\n                _context.next = 19;\n                break;\n              }\n              _context.next = 17;\n              return result.value;\n            case 17:\n              _context.next = 20;\n              break;\n            case 19:\n              throw result.err;\n            case 20:\n              i++;\n              _context.next = 10;\n              break;\n            case 23:\n              _iteratorAbruptCompletion = false;\n              _context.next = 4;\n              break;\n            case 26:\n              _context.next = 32;\n              break;\n            case 28:\n              _context.prev = 28;\n              _context.t0 = _context[\"catch\"](2);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 32:\n              _context.prev = 32;\n              _context.prev = 33;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 37;\n                break;\n              }\n              _context.next = 37;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 37:\n              _context.prev = 37;\n              if (!_didIteratorError) {\n                _context.next = 40;\n                break;\n              }\n              throw _iteratorError;\n            case 40:\n              return _context.finish(37);\n            case 41:\n              return _context.finish(32);\n            case 42:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 28, 32, 42], [33,, 37, 41]]);\n    })();\n  });\n  return _parallelBatch.apply(this, arguments);\n}\nmodule.exports = parallelBatch;","map":{"version":3,"names":["batch","require","parallelBatch","source","size","tasks","things","map","p","then","value","ok","err","i","length","result","module","exports"],"sources":["/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/it-parallel-batch/index.js"],"sourcesContent":["'use strict'\n\nconst batch = require('it-batch')\n\n/**\n * @template T\n * @typedef {{ok:true, value:T}} Success\n */\n\n/**\n * @typedef {{ok:false, err:Error}} Failure\n */\n\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n *\n * @template T\n * @param {AsyncIterable<() => Promise<T>>|Iterable<() => Promise<T>>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T>}\n */\nasync function * parallelBatch (source, size = 1) {\n  for await (const tasks of batch(source, size)) {\n    /** @type {Promise<Success<T>|Failure>[]} */\n    const things = tasks.map(\n      /**\n       * @param {() => Promise<T>} p\n       */\n      p => {\n        return p().then(value => ({ ok: true, value }), err => ({ ok: false, err }))\n      })\n\n    for (let i = 0; i < things.length; i++) {\n      const result = await things[i]\n\n      if (result.ok) {\n        yield result.value\n      } else {\n        throw result.err\n      }\n    }\n  }\n}\n\nmodule.exports = parallelBatch\n"],"mappings":"AAAA,YAAY;;AAAA;AAAA;AAAA;AAAA;AAEZ,IAAMA,KAAK,GAAGC,OAAO,CAAC,UAAU,CAAC;;AAEjC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA,SAUiBC,aAAa;EAAA;AAAA;AAAA;EAAA,qCAA9B,UAAgCC,MAAM;IAAA,IAAEC,IAAI,uEAAG,CAAC;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA;cAAA;cAAA,2BACpBJ,KAAK,CAACG,MAAM,EAAEC,IAAI,CAAC;YAAA;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAA5BC,KAAK;cACpB;cACMC,MAAM,GAAGD,KAAK,CAACE,GAAG;cACtB;AACN;AACA;cACM,UAAAC,CAAC,EAAI;gBACH,OAAOA,CAAC,EAAE,CAACC,IAAI,CAAC,UAAAC,KAAK;kBAAA,OAAK;oBAAEC,EAAE,EAAE,IAAI;oBAAED,KAAK,EAALA;kBAAM,CAAC;gBAAA,CAAC,EAAE,UAAAE,GAAG;kBAAA,OAAK;oBAAED,EAAE,EAAE,KAAK;oBAAEC,GAAG,EAAHA;kBAAI,CAAC;gBAAA,CAAC,CAAC;cAC9E,CAAC,CAAC;cAEKC,CAAC,GAAG,CAAC;YAAA;cAAA,MAAEA,CAAC,GAAGP,MAAM,CAACQ,MAAM;gBAAA;gBAAA;cAAA;cAAA;cAAA,4BACVR,MAAM,CAACO,CAAC,CAAC;YAAA;cAAxBE,MAAM;cAAA,KAERA,MAAM,CAACJ,EAAE;gBAAA;gBAAA;cAAA;cAAA;cACX,OAAMI,MAAM,CAACL,KAAK;YAAA;cAAA;cAAA;YAAA;cAAA,MAEZK,MAAM,CAACH,GAAG;YAAA;cANeC,CAAC,EAAE;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;YAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAAA,CAUzC;EAAA;AAAA;AAEDG,MAAM,CAACC,OAAO,GAAGf,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}