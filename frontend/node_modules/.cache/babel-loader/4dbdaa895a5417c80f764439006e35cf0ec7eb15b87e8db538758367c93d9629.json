{"ast":null,"code":"import _regeneratorRuntime from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _awaitAsyncGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport BufferList from 'bl/BufferList.js';\nfunction fixedSizeChunker(_x, _x2) {\n  return _fixedSizeChunker.apply(this, arguments);\n}\nfunction _fixedSizeChunker() {\n  _fixedSizeChunker = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(source, options) {\n    var bl, currentLength, emitted, maxChunkSize, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, buffer, newBl;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            bl = new BufferList();\n            currentLength = 0;\n            emitted = false;\n            maxChunkSize = options.maxChunkSize;\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 6;\n            _iterator = _asyncIterator(source);\n          case 8:\n            _context.next = 10;\n            return _awaitAsyncGenerator(_iterator.next());\n          case 10:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 24;\n              break;\n            }\n            buffer = _step.value;\n            bl.append(buffer);\n            currentLength += buffer.length;\n          case 14:\n            if (!(currentLength >= maxChunkSize)) {\n              _context.next = 21;\n              break;\n            }\n            _context.next = 17;\n            return bl.slice(0, maxChunkSize);\n          case 17:\n            emitted = true;\n            if (maxChunkSize === bl.length) {\n              bl = new BufferList();\n              currentLength = 0;\n            } else {\n              newBl = new BufferList();\n              newBl.append(bl.shallowSlice(maxChunkSize));\n              bl = newBl;\n              currentLength -= maxChunkSize;\n            }\n            _context.next = 14;\n            break;\n          case 21:\n            _iteratorAbruptCompletion = false;\n            _context.next = 8;\n            break;\n          case 24:\n            _context.next = 30;\n            break;\n          case 26:\n            _context.prev = 26;\n            _context.t0 = _context[\"catch\"](6);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n          case 30:\n            _context.prev = 30;\n            _context.prev = 31;\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 35;\n              break;\n            }\n            _context.next = 35;\n            return _awaitAsyncGenerator(_iterator.return());\n          case 35:\n            _context.prev = 35;\n            if (!_didIteratorError) {\n              _context.next = 38;\n              break;\n            }\n            throw _iteratorError;\n          case 38:\n            return _context.finish(35);\n          case 39:\n            return _context.finish(30);\n          case 40:\n            if (!(!emitted || currentLength)) {\n              _context.next = 43;\n              break;\n            }\n            _context.next = 43;\n            return bl.slice(0, currentLength);\n          case 43:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[6, 26, 30, 40], [31,, 35, 39]]);\n  }));\n  return _fixedSizeChunker.apply(this, arguments);\n}\nexport default fixedSizeChunker;","map":{"version":3,"names":["BufferList","fixedSizeChunker","source","options","bl","currentLength","emitted","maxChunkSize","buffer","append","length","slice","newBl","shallowSlice"],"sources":["/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/ipfs-unixfs-importer/esm/src/chunker/fixed-size.js"],"sourcesContent":["import BufferList from 'bl/BufferList.js';\nasync function* fixedSizeChunker(source, options) {\n  let bl = new BufferList();\n  let currentLength = 0;\n  let emitted = false;\n  const maxChunkSize = options.maxChunkSize;\n  for await (const buffer of source) {\n    bl.append(buffer);\n    currentLength += buffer.length;\n    while (currentLength >= maxChunkSize) {\n      yield bl.slice(0, maxChunkSize);\n      emitted = true;\n      if (maxChunkSize === bl.length) {\n        bl = new BufferList();\n        currentLength = 0;\n      } else {\n        const newBl = new BufferList();\n        newBl.append(bl.shallowSlice(maxChunkSize));\n        bl = newBl;\n        currentLength -= maxChunkSize;\n      }\n    }\n  }\n  if (!emitted || currentLength) {\n    yield bl.slice(0, currentLength);\n  }\n}\nexport default fixedSizeChunker;"],"mappings":";;;;AAAA,OAAOA,UAAU,MAAM,kBAAkB;AAAC,SAC1BC,gBAAgB;EAAA;AAAA;AAAA;EAAA,iFAAhC,iBAAiCC,MAAM,EAAEC,OAAO;IAAA;IAAA;MAAA;QAAA;UAAA;YAC1CC,EAAE,GAAG,IAAIJ,UAAU,EAAE;YACrBK,aAAa,GAAG,CAAC;YACjBC,OAAO,GAAG,KAAK;YACbC,YAAY,GAAGJ,OAAO,CAACI,YAAY;YAAA;YAAA;YAAA;YAAA,2BACdL,MAAM;UAAA;YAAA;YAAA;UAAA;YAAA;cAAA;cAAA;YAAA;YAAhBM,MAAM;YACrBJ,EAAE,CAACK,MAAM,CAACD,MAAM,CAAC;YACjBH,aAAa,IAAIG,MAAM,CAACE,MAAM;UAAC;YAAA,MACxBL,aAAa,IAAIE,YAAY;cAAA;cAAA;YAAA;YAAA;YAClC,OAAMH,EAAE,CAACO,KAAK,CAAC,CAAC,EAAEJ,YAAY,CAAC;UAAA;YAC/BD,OAAO,GAAG,IAAI;YACd,IAAIC,YAAY,KAAKH,EAAE,CAACM,MAAM,EAAE;cAC9BN,EAAE,GAAG,IAAIJ,UAAU,EAAE;cACrBK,aAAa,GAAG,CAAC;YACnB,CAAC,MAAM;cACCO,KAAK,GAAG,IAAIZ,UAAU,EAAE;cAC9BY,KAAK,CAACH,MAAM,CAACL,EAAE,CAACS,YAAY,CAACN,YAAY,CAAC,CAAC;cAC3CH,EAAE,GAAGQ,KAAK;cACVP,aAAa,IAAIE,YAAY;YAC/B;YAAC;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;cAAA;cAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;cAAA;cAAA;YAAA;YAAA;UAAA;YAAA;UAAA;YAAA;UAAA;YAAA,MAGD,CAACD,OAAO,IAAID,aAAa;cAAA;cAAA;YAAA;YAAA;YAC3B,OAAMD,EAAE,CAACO,KAAK,CAAC,CAAC,EAAEN,aAAa,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAEnC;EAAA;AAAA;AACD,eAAeJ,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}