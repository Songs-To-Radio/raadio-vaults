{"ast":null,"code":"import { NFTStorage, File, Blob } from \"nft.storage\";\nimport axios from \"axios\";\nimport { v4 } from \"uuid\";\nasync function uploadToServer(ipfsUrl, wallet_address, title) {\n  try {\n    // let res = await axios.post(\n    //   \"http://localhost:2000/create-vault\",\n    //   {\n    //     controller: wallet_address,\n    //     ipfsUrl,\n    //     mediaTitle: title,\n    //   },\n    //   {\n    //     headers: {\n    //       \"content-type\": \"application/json\",\n    //     },\n    //   }\n    // )\n    return res.status;\n  } catch (error) {\n    throw error;\n  }\n}\nconst API_KEY = process.env.NFT_STORAGE_API_KEY || \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweGE5M0I4NGFlNThkMDNkOTAwQjc5MzExOGEzNDQ2ZEZCZUU5NTVERmEiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY1MTUxMDYyMDg2MCwibmFtZSI6IlNUUiAtIE1hcmtldHBsYWNlICJ9.D71kmGtnh1wOLBF2BfVqMtuCPk79wvEiFxuhpuKgqwA\";\nconst client = new NFTStorage({\n  token: API_KEY\n});\nasync function createMetadata(image) {\n  try {\n    let url = URL.createObjectURL(image);\n    let res = await fetch(url);\n    let blob = await res.blob();\n    const content = new File([image], v4() + \".\" + blob.type.split(\"/\")[1]);\n    const cid = await client.storeBlob(content);\n    console.log(\"this is the image cid \", \"https://nftstorage.link/ipfs/\" + cid);\n    return cid;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function uploadToIpfsAndServer(image, name, description, wallet_address, web2) {\n  try {\n    let url = URL.createObjectURL(image);\n    let res = await fetch(url);\n    let blob = await res.blob();\n    const content = new File([image], v4() + \".\" + blob.type.split(\"/\")[1]);\n    const baseURI = await client.store({\n      name,\n      video: content,\n      image: content,\n      description,\n      description,\n      collection: name,\n      web2_metadata: web2\n    });\n    console.log(baseURI);\n    return await uploadToServer(baseURI.url, wallet_address, name);\n  } catch (error) {\n    throw error;\n  }\n}","map":{"version":3,"names":["NFTStorage","File","Blob","axios","v4","uploadToServer","ipfsUrl","wallet_address","title","res","status","error","API_KEY","process","env","NFT_STORAGE_API_KEY","client","token","createMetadata","image","url","URL","createObjectURL","fetch","blob","content","type","split","cid","storeBlob","console","log","uploadToIpfsAndServer","name","description","web2","baseURI","store","video","collection","web2_metadata"],"sources":["/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/src/api/api.js"],"sourcesContent":["import { NFTStorage, File, Blob } from \"nft.storage\"\nimport axios from \"axios\";\nimport { v4 } from \"uuid\";\n\nasync function uploadToServer(ipfsUrl, wallet_address, title) {\n  try {\n    // let res = await axios.post(\n    //   \"http://localhost:2000/create-vault\",\n    //   {\n    //     controller: wallet_address,\n    //     ipfsUrl,\n    //     mediaTitle: title,\n    //   },\n    //   {\n    //     headers: {\n    //       \"content-type\": \"application/json\",\n    //     },\n    //   }\n    // )\n    return res.status;\n  } catch (error) {\n    throw(error);\n  }\n}\n\n\n\nconst API_KEY = process.env.NFT_STORAGE_API_KEY || \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweGE5M0I4NGFlNThkMDNkOTAwQjc5MzExOGEzNDQ2ZEZCZUU5NTVERmEiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY1MTUxMDYyMDg2MCwibmFtZSI6IlNUUiAtIE1hcmtldHBsYWNlICJ9.D71kmGtnh1wOLBF2BfVqMtuCPk79wvEiFxuhpuKgqwA\"\nconst client = new NFTStorage({ token: API_KEY });\n\nasync function createMetadata(image) {\n  try {\n    let url = URL.createObjectURL(image);\n    let res = await fetch(url);\n    let blob = await res.blob();\n    const content = new File([image], v4() + \".\" + blob.type.split(\"/\")[1])\n    const cid = await client.storeBlob(content)\n    console.log(\"this is the image cid \", \"https://nftstorage.link/ipfs/\"+cid)\n    return cid\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function uploadToIpfsAndServer(image, name, description, wallet_address, web2) {\n  try {\n    let url = URL.createObjectURL(image);\n    let res = await fetch(url);\n    let blob = await res.blob();\n    const content = new File([image], v4() + \".\" + blob.type.split(\"/\")[1])\n\n    const baseURI = await client.store({\n        name,\n        video: content,\n        image: content,\n        description, description,\n        collection: name,\n        web2_metadata: web2\n    });\n    console.log(baseURI);\n    return await uploadToServer(baseURI.url, wallet_address, name);\n  } catch (error) {\n    throw(error)\n  }\n}\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,IAAI,EAAEC,IAAI,QAAQ,aAAa;AACpD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,EAAE,QAAQ,MAAM;AAEzB,eAAeC,cAAc,CAACC,OAAO,EAAEC,cAAc,EAAEC,KAAK,EAAE;EAC5D,IAAI;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,OAAOC,GAAG,CAACC,MAAM;EACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF;AAIA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,mBAAmB,IAAI,+PAA+P;AAClT,MAAMC,MAAM,GAAG,IAAIhB,UAAU,CAAC;EAAEiB,KAAK,EAAEL;AAAQ,CAAC,CAAC;AAEjD,eAAeM,cAAc,CAACC,KAAK,EAAE;EACnC,IAAI;IACF,IAAIC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACH,KAAK,CAAC;IACpC,IAAIV,GAAG,GAAG,MAAMc,KAAK,CAACH,GAAG,CAAC;IAC1B,IAAII,IAAI,GAAG,MAAMf,GAAG,CAACe,IAAI,EAAE;IAC3B,MAAMC,OAAO,GAAG,IAAIxB,IAAI,CAAC,CAACkB,KAAK,CAAC,EAAEf,EAAE,EAAE,GAAG,GAAG,GAAGoB,IAAI,CAACE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACvE,MAAMC,GAAG,GAAG,MAAMZ,MAAM,CAACa,SAAS,CAACJ,OAAO,CAAC;IAC3CK,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE,+BAA+B,GAACH,GAAG,CAAC;IAC1E,OAAOA,GAAG;EACZ,CAAC,CAAC,OAAOjB,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeqB,qBAAqB,CAACb,KAAK,EAAEc,IAAI,EAAEC,WAAW,EAAE3B,cAAc,EAAE4B,IAAI,EAAE;EAC1F,IAAI;IACF,IAAIf,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACH,KAAK,CAAC;IACpC,IAAIV,GAAG,GAAG,MAAMc,KAAK,CAACH,GAAG,CAAC;IAC1B,IAAII,IAAI,GAAG,MAAMf,GAAG,CAACe,IAAI,EAAE;IAC3B,MAAMC,OAAO,GAAG,IAAIxB,IAAI,CAAC,CAACkB,KAAK,CAAC,EAAEf,EAAE,EAAE,GAAG,GAAG,GAAGoB,IAAI,CAACE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAEvE,MAAMS,OAAO,GAAG,MAAMpB,MAAM,CAACqB,KAAK,CAAC;MAC/BJ,IAAI;MACJK,KAAK,EAAEb,OAAO;MACdN,KAAK,EAAEM,OAAO;MACdS,WAAW;MAAEA,WAAW;MACxBK,UAAU,EAAEN,IAAI;MAChBO,aAAa,EAAEL;IACnB,CAAC,CAAC;IACFL,OAAO,CAACC,GAAG,CAACK,OAAO,CAAC;IACpB,OAAO,MAAM/B,cAAc,CAAC+B,OAAO,CAAChB,GAAG,EAAEb,cAAc,EAAE0B,IAAI,CAAC;EAChE,CAAC,CAAC,OAAOtB,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}