{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _wrapAsyncGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _asyncGeneratorDelegate from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js\";\nimport _asyncIterator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { CarWriter } from '@ipld/car';\nexport var TreewalkCarJoiner = /*#__PURE__*/function () {\n  function TreewalkCarJoiner(cars) {\n    _classCallCheck(this, TreewalkCarJoiner);\n    this._cars = Array.from(cars);\n    if (!this._cars.length) throw new Error('missing CARs');\n  }\n  _createClass(TreewalkCarJoiner, [{\n    key: \"car\",\n    value: function car() {\n      var _this = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var reader, roots, _CarWriter$create, writer, out, writeCar;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                reader = _this._cars[0];\n                _context3.next = 3;\n                return _awaitAsyncGenerator(reader.getRoots());\n              case 3:\n                roots = _context3.sent;\n                _CarWriter$create = CarWriter.create(roots), writer = _CarWriter$create.writer, out = _CarWriter$create.out;\n                writeCar = /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n                    var written, writeBlocks, _iterator2, _step2, _reader;\n                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            written = new Set();\n                            writeBlocks = /*#__PURE__*/function () {\n                              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(reader) {\n                                var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, b;\n                                return _regeneratorRuntime().wrap(function _callee$(_context) {\n                                  while (1) {\n                                    switch (_context.prev = _context.next) {\n                                      case 0:\n                                        _iteratorAbruptCompletion = false;\n                                        _didIteratorError = false;\n                                        _context.prev = 2;\n                                        _iterator = _asyncIterator(reader.blocks());\n                                      case 4:\n                                        _context.next = 6;\n                                        return _iterator.next();\n                                      case 6:\n                                        if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                                          _context.next = 16;\n                                          break;\n                                        }\n                                        b = _step.value;\n                                        if (!written.has(b.cid.toString())) {\n                                          _context.next = 10;\n                                          break;\n                                        }\n                                        return _context.abrupt(\"continue\", 13);\n                                      case 10:\n                                        _context.next = 12;\n                                        return writer.put(b);\n                                      case 12:\n                                        written.add(b.cid.toString());\n                                      case 13:\n                                        _iteratorAbruptCompletion = false;\n                                        _context.next = 4;\n                                        break;\n                                      case 16:\n                                        _context.next = 22;\n                                        break;\n                                      case 18:\n                                        _context.prev = 18;\n                                        _context.t0 = _context[\"catch\"](2);\n                                        _didIteratorError = true;\n                                        _iteratorError = _context.t0;\n                                      case 22:\n                                        _context.prev = 22;\n                                        _context.prev = 23;\n                                        if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                                          _context.next = 27;\n                                          break;\n                                        }\n                                        _context.next = 27;\n                                        return _iterator.return();\n                                      case 27:\n                                        _context.prev = 27;\n                                        if (!_didIteratorError) {\n                                          _context.next = 30;\n                                          break;\n                                        }\n                                        throw _iteratorError;\n                                      case 30:\n                                        return _context.finish(27);\n                                      case 31:\n                                        return _context.finish(22);\n                                      case 32:\n                                      case \"end\":\n                                        return _context.stop();\n                                    }\n                                  }\n                                }, _callee, null, [[2, 18, 22, 32], [23,, 27, 31]]);\n                              }));\n                              return function writeBlocks(_x) {\n                                return _ref2.apply(this, arguments);\n                              };\n                            }();\n                            _context2.prev = 2;\n                            _context2.next = 5;\n                            return writeBlocks(reader);\n                          case 5:\n                            _iterator2 = _createForOfIteratorHelper(_this._cars.slice(1));\n                            _context2.prev = 6;\n                            _iterator2.s();\n                          case 8:\n                            if ((_step2 = _iterator2.n()).done) {\n                              _context2.next = 14;\n                              break;\n                            }\n                            _reader = _step2.value;\n                            _context2.next = 12;\n                            return writeBlocks(_reader);\n                          case 12:\n                            _context2.next = 8;\n                            break;\n                          case 14:\n                            _context2.next = 19;\n                            break;\n                          case 16:\n                            _context2.prev = 16;\n                            _context2.t0 = _context2[\"catch\"](6);\n                            _iterator2.e(_context2.t0);\n                          case 19:\n                            _context2.prev = 19;\n                            _iterator2.f();\n                            return _context2.finish(19);\n                          case 22:\n                            _context2.next = 27;\n                            break;\n                          case 24:\n                            _context2.prev = 24;\n                            _context2.t1 = _context2[\"catch\"](2);\n                            console.error(_context2.t1);\n                          case 27:\n                            _context2.prev = 27;\n                            _context2.next = 30;\n                            return writer.close();\n                          case 30:\n                            return _context2.finish(27);\n                          case 31:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, null, [[2, 24, 27, 31], [6, 16, 19, 22]]);\n                  }));\n                  return function writeCar() {\n                    return _ref.apply(this, arguments);\n                  };\n                }();\n                writeCar();\n                return _context3.delegateYield(_asyncGeneratorDelegate(_asyncIterator(out), _awaitAsyncGenerator), \"t0\", 8);\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    }\n  }]);\n  return TreewalkCarJoiner;\n}();","map":{"version":3,"names":["CarWriter","TreewalkCarJoiner","cars","_cars","Array","from","length","Error","reader","getRoots","roots","create","writer","out","writeCar","written","Set","writeBlocks","blocks","b","has","cid","toString","put","add","slice","console","error","close"],"sources":["/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/carbites/esm/lib/treewalk/joiner.js"],"sourcesContent":["import { CarWriter } from '@ipld/car';\nexport class TreewalkCarJoiner {\n  constructor(cars) {\n    this._cars = Array.from(cars);\n    if (!this._cars.length)\n      throw new Error('missing CARs');\n  }\n  async *car() {\n    const reader = this._cars[0];\n    const roots = await reader.getRoots();\n    const {writer, out} = CarWriter.create(roots);\n    const writeCar = async () => {\n      const written = new Set();\n      const writeBlocks = async reader => {\n        for await (const b of reader.blocks()) {\n          if (written.has(b.cid.toString()))\n            continue;\n          await writer.put(b);\n          written.add(b.cid.toString());\n        }\n      };\n      try {\n        await writeBlocks(reader);\n        for (const reader of this._cars.slice(1)) {\n          await writeBlocks(reader);\n        }\n      } catch (err) {\n        console.error(err);\n      } finally {\n        await writer.close();\n      }\n    };\n    writeCar();\n    yield* out;\n  }\n}"],"mappings":";;;;;;;;;AAAA,SAASA,SAAS,QAAQ,WAAW;AACrC,WAAaC,iBAAiB;EAC5B,2BAAYC,IAAI,EAAE;IAAA;IAChB,IAAI,CAACC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAACH,IAAI,CAAC;IAC7B,IAAI,CAAC,IAAI,CAACC,KAAK,CAACG,MAAM,EACpB,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;EACnC;EAAC;IAAA;IAAA,OACD,eAAa;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBACLC,MAAM,GAAG,KAAI,CAACL,KAAK,CAAC,CAAC,CAAC;gBAAA;gBAAA,4BACRK,MAAM,CAACC,QAAQ,EAAE;cAAA;gBAA/BC,KAAK;gBAAA,oBACWV,SAAS,CAACW,MAAM,CAACD,KAAK,CAAC,EAAtCE,MAAM,qBAANA,MAAM,EAAEC,GAAG,qBAAHA,GAAG;gBACZC,QAAQ;kBAAA,sEAAG;oBAAA;oBAAA;sBAAA;wBAAA;0BAAA;4BACTC,OAAO,GAAG,IAAIC,GAAG,EAAE;4BACnBC,WAAW;8BAAA,uEAAG,iBAAMT,MAAM;gCAAA;gCAAA;kCAAA;oCAAA;sCAAA;wCAAA;wCAAA;wCAAA;wCAAA,2BACRA,MAAM,CAACU,MAAM,EAAE;sCAAA;wCAAA;wCAAA;sCAAA;wCAAA;0CAAA;0CAAA;wCAAA;wCAApBC,CAAC;wCAAA,KACZJ,OAAO,CAACK,GAAG,CAACD,CAAC,CAACE,GAAG,CAACC,QAAQ,EAAE,CAAC;0CAAA;0CAAA;wCAAA;wCAAA;sCAAA;wCAAA;wCAAA,OAE3BV,MAAM,CAACW,GAAG,CAACJ,CAAC,CAAC;sCAAA;wCACnBJ,OAAO,CAACS,GAAG,CAACL,CAAC,CAACE,GAAG,CAACC,QAAQ,EAAE,CAAC;sCAAC;wCAAA;wCAAA;wCAAA;sCAAA;wCAAA;wCAAA;sCAAA;wCAAA;wCAAA;wCAAA;wCAAA;sCAAA;wCAAA;wCAAA;wCAAA;0CAAA;0CAAA;wCAAA;wCAAA;wCAAA;sCAAA;wCAAA;wCAAA;0CAAA;0CAAA;wCAAA;wCAAA;sCAAA;wCAAA;sCAAA;wCAAA;sCAAA;sCAAA;wCAAA;oCAAA;kCAAA;gCAAA;8BAAA,CAEjC;8BAAA,gBAPKL,WAAW;gCAAA;8BAAA;4BAAA;4BAAA;4BAAA;4BAAA,OASTA,WAAW,CAACT,MAAM,CAAC;0BAAA;4BAAA,wCACJ,KAAI,CAACL,KAAK,CAACsB,KAAK,CAAC,CAAC,CAAC;4BAAA;4BAAA;0BAAA;4BAAA;8BAAA;8BAAA;4BAAA;4BAA7BjB,OAAM;4BAAA;4BAAA,OACTS,WAAW,CAACT,OAAM,CAAC;0BAAA;4BAAA;4BAAA;0BAAA;4BAAA;4BAAA;0BAAA;4BAAA;4BAAA;4BAAA;0BAAA;4BAAA;4BAAA;4BAAA;0BAAA;4BAAA;4BAAA;0BAAA;4BAAA;4BAAA;4BAG3BkB,OAAO,CAACC,KAAK,cAAK;0BAAC;4BAAA;4BAAA;4BAAA,OAEbf,MAAM,CAACgB,KAAK,EAAE;0BAAA;4BAAA;0BAAA;0BAAA;4BAAA;wBAAA;sBAAA;oBAAA;kBAAA,CAEvB;kBAAA,gBApBKd,QAAQ;oBAAA;kBAAA;gBAAA;gBAqBdA,QAAQ,EAAE;gBACV,sEAAOD,GAAG;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IACZ;EAAC;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}