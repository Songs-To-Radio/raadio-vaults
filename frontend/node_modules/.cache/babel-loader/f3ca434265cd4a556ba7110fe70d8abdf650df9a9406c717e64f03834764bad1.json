{"ast":null,"code":"import _asyncToGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _awaitAsyncGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport errCode from 'err-code';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport blobToIt from 'blob-to-it';\nimport itPeekable from 'it-peekable';\nimport all from 'it-all';\nimport map from 'it-map';\nimport { isBytes, isReadableStream, isBlob } from './utils.js';\nfunction toAsyncIterable(_x) {\n  return _toAsyncIterable.apply(this, arguments);\n}\nfunction _toAsyncIterable() {\n  _toAsyncIterable = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(thing) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return thing;\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _toAsyncIterable.apply(this, arguments);\n}\nexport function normaliseContent(_x2) {\n  return _normaliseContent.apply(this, arguments);\n}\nfunction _normaliseContent() {\n  _normaliseContent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(input) {\n    var peekable, _yield$peekable$peek, value, done;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!isBytes(input)) {\n              _context2.next = 2;\n              break;\n            }\n            return _context2.abrupt(\"return\", toAsyncIterable(toBytes(input)));\n          case 2:\n            if (!(typeof input === 'string' || input instanceof String)) {\n              _context2.next = 4;\n              break;\n            }\n            return _context2.abrupt(\"return\", toAsyncIterable(toBytes(input.toString())));\n          case 4:\n            if (!isBlob(input)) {\n              _context2.next = 6;\n              break;\n            }\n            return _context2.abrupt(\"return\", blobToIt(input));\n          case 6:\n            if (isReadableStream(input)) {\n              input = browserStreamToIt(input);\n            }\n            if (!(Symbol.iterator in input || Symbol.asyncIterator in input)) {\n              _context2.next = 27;\n              break;\n            }\n            peekable = itPeekable(input);\n            _context2.next = 11;\n            return peekable.peek();\n          case 11:\n            _yield$peekable$peek = _context2.sent;\n            value = _yield$peekable$peek.value;\n            done = _yield$peekable$peek.done;\n            if (!done) {\n              _context2.next = 16;\n              break;\n            }\n            return _context2.abrupt(\"return\", toAsyncIterable(new Uint8Array(0)));\n          case 16:\n            peekable.push(value);\n            if (!Number.isInteger(value)) {\n              _context2.next = 25;\n              break;\n            }\n            _context2.t0 = toAsyncIterable;\n            _context2.t1 = Uint8Array;\n            _context2.next = 22;\n            return all(peekable);\n          case 22:\n            _context2.t2 = _context2.sent;\n            _context2.t3 = _context2.t1.from.call(_context2.t1, _context2.t2);\n            return _context2.abrupt(\"return\", (0, _context2.t0)(_context2.t3));\n          case 25:\n            if (!(isBytes(value) || typeof value === 'string' || value instanceof String)) {\n              _context2.next = 27;\n              break;\n            }\n            return _context2.abrupt(\"return\", map(peekable, toBytes));\n          case 27:\n            throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n          case 28:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _normaliseContent.apply(this, arguments);\n}\nfunction toBytes(chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk;\n  }\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);\n  }\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk);\n  }\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk);\n  }\n  return uint8ArrayFromString(chunk.toString());\n}","map":{"version":3,"names":["errCode","fromString","uint8ArrayFromString","browserStreamToIt","blobToIt","itPeekable","all","map","isBytes","isReadableStream","isBlob","toAsyncIterable","thing","normaliseContent","input","toBytes","String","toString","Symbol","iterator","asyncIterator","peekable","peek","value","done","Uint8Array","push","Number","isInteger","from","Error","chunk","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray"],"sources":["/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/ipfs-core-utils/esm/src/files/normalise-content.js"],"sourcesContent":["import errCode from 'err-code';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport blobToIt from 'blob-to-it';\nimport itPeekable from 'it-peekable';\nimport all from 'it-all';\nimport map from 'it-map';\nimport {\n  isBytes,\n  isReadableStream,\n  isBlob\n} from './utils.js';\nasync function* toAsyncIterable(thing) {\n  yield thing;\n}\nexport async function normaliseContent(input) {\n  if (isBytes(input)) {\n    return toAsyncIterable(toBytes(input));\n  }\n  if (typeof input === 'string' || input instanceof String) {\n    return toAsyncIterable(toBytes(input.toString()));\n  }\n  if (isBlob(input)) {\n    return blobToIt(input);\n  }\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {value, done} = await peekable.peek();\n    if (done) {\n      return toAsyncIterable(new Uint8Array(0));\n    }\n    peekable.push(value);\n    if (Number.isInteger(value)) {\n      return toAsyncIterable(Uint8Array.from(await all(peekable)));\n    }\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return map(peekable, toBytes);\n    }\n  }\n  throw errCode(new Error(`Unexpected input: ${ input }`), 'ERR_UNEXPECTED_INPUT');\n}\nfunction toBytes(chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk;\n  }\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);\n  }\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk);\n  }\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk);\n  }\n  return uint8ArrayFromString(chunk.toString());\n}"],"mappings":";;;;AAAA,OAAOA,OAAO,MAAM,UAAU;AAC9B,SAASC,UAAU,IAAIC,oBAAoB,QAAQ,yBAAyB;AAC5E,OAAOC,iBAAiB,MAAM,8BAA8B;AAC5D,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,UAAU,MAAM,aAAa;AACpC,OAAOC,GAAG,MAAM,QAAQ;AACxB,OAAOC,GAAG,MAAM,QAAQ;AACxB,SACEC,OAAO,EACPC,gBAAgB,EAChBC,MAAM,QACD,YAAY;AAAC,SACJC,eAAe;EAAA;AAAA;AAAA;EAAA,gFAA/B,iBAAgCC,KAAK;IAAA;MAAA;QAAA;UAAA;YAAA;YACnC,OAAMA,KAAK;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACZ;EAAA;AAAA;AACD,gBAAsBC,gBAAgB;EAAA;AAAA;AA4BrC;EAAA,+EA5BM,kBAAgCC,KAAK;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA,KACtCN,OAAO,CAACM,KAAK,CAAC;cAAA;cAAA;YAAA;YAAA,kCACTH,eAAe,CAACI,OAAO,CAACD,KAAK,CAAC,CAAC;UAAA;YAAA,MAEpC,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,YAAYE,MAAM;cAAA;cAAA;YAAA;YAAA,kCAC/CL,eAAe,CAACI,OAAO,CAACD,KAAK,CAACG,QAAQ,EAAE,CAAC,CAAC;UAAA;YAAA,KAE/CP,MAAM,CAACI,KAAK,CAAC;cAAA;cAAA;YAAA;YAAA,kCACRV,QAAQ,CAACU,KAAK,CAAC;UAAA;YAExB,IAAIL,gBAAgB,CAACK,KAAK,CAAC,EAAE;cAC3BA,KAAK,GAAGX,iBAAiB,CAACW,KAAK,CAAC;YAClC;YAAC,MACGI,MAAM,CAACC,QAAQ,IAAIL,KAAK,IAAII,MAAM,CAACE,aAAa,IAAIN,KAAK;cAAA;cAAA;YAAA;YACrDO,QAAQ,GAAGhB,UAAU,CAACS,KAAK,CAAC;YAAA;YAAA,OACNO,QAAQ,CAACC,IAAI,EAAE;UAAA;YAAA;YAApCC,KAAK,wBAALA,KAAK;YAAEC,IAAI,wBAAJA,IAAI;YAAA,KACdA,IAAI;cAAA;cAAA;YAAA;YAAA,kCACCb,eAAe,CAAC,IAAIc,UAAU,CAAC,CAAC,CAAC,CAAC;UAAA;YAE3CJ,QAAQ,CAACK,IAAI,CAACH,KAAK,CAAC;YAAC,KACjBI,MAAM,CAACC,SAAS,CAACL,KAAK,CAAC;cAAA;cAAA;YAAA;YAAA,eAClBZ,eAAe;YAAA,eAACc,UAAU;YAAA;YAAA,OAAYnB,GAAG,CAACe,QAAQ,CAAC;UAAA;YAAA;YAAA,4BAAxBQ,IAAI;YAAA;UAAA;YAAA,MAEpCrB,OAAO,CAACe,KAAK,CAAC,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,YAAYP,MAAM;cAAA;cAAA;YAAA;YAAA,kCACjET,GAAG,CAACc,QAAQ,EAAEN,OAAO,CAAC;UAAA;YAAA,MAG3Bf,OAAO,CAAC,IAAI8B,KAAK,6BAAuBhB,KAAK,EAAI,EAAE,sBAAsB,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACjF;EAAA;AAAA;AACD,SAASC,OAAO,CAACgB,KAAK,EAAE;EACtB,IAAIA,KAAK,YAAYN,UAAU,EAAE;IAC/B,OAAOM,KAAK;EACd;EACA,IAAIC,WAAW,CAACC,MAAM,CAACF,KAAK,CAAC,EAAE;IAC7B,OAAO,IAAIN,UAAU,CAACM,KAAK,CAACG,MAAM,EAAEH,KAAK,CAACI,UAAU,EAAEJ,KAAK,CAACK,UAAU,CAAC;EACzE;EACA,IAAIL,KAAK,YAAYC,WAAW,EAAE;IAChC,OAAO,IAAIP,UAAU,CAACM,KAAK,CAAC;EAC9B;EACA,IAAIM,KAAK,CAACC,OAAO,CAACP,KAAK,CAAC,EAAE;IACxB,OAAON,UAAU,CAACI,IAAI,CAACE,KAAK,CAAC;EAC/B;EACA,OAAO7B,oBAAoB,CAAC6B,KAAK,CAACd,QAAQ,EAAE,CAAC;AAC/C"},"metadata":{},"sourceType":"module","externalDependencies":[]}