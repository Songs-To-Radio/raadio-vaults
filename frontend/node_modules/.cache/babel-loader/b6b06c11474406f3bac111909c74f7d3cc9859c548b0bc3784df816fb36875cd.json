{"ast":null,"code":"import _regeneratorRuntime from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _awaitAsyncGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\n/**\n * An implementation of the CAR reader interface that is backed by a blockstore.\n *\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('@ipld/car/api').CarReader} CarReader\n * @implements {CarReader}\n */\nexport var BlockstoreCarReader = /*#__PURE__*/function () {\n  /**\n   * @param {number} version\n   * @param {CID[]} roots\n   * @param {import('ipfs-car/blockstore').Blockstore} blockstore\n   */\n  function BlockstoreCarReader(version, roots, blockstore) {\n    _classCallCheck(this, BlockstoreCarReader);\n    /**\n     * @private\n     */\n    this._version = version;\n    /**\n     * @private\n     */\n    this._roots = roots;\n    /**\n     * @private\n     */\n    this._blockstore = blockstore;\n  }\n  _createClass(BlockstoreCarReader, [{\n    key: \"version\",\n    get: function get() {\n      return this._version;\n    }\n  }, {\n    key: \"blockstore\",\n    get: function get() {\n      return this._blockstore;\n    }\n  }, {\n    key: \"getRoots\",\n    value: function () {\n      var _getRoots = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this._roots);\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getRoots() {\n        return _getRoots.apply(this, arguments);\n      }\n      return getRoots;\n    }()\n    /**\n     * @param {CID} cid\n     */\n  }, {\n    key: \"has\",\n    value: function has(cid) {\n      return this._blockstore.has(cid);\n    }\n\n    /**\n     * @param {CID} cid\n     */\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(cid) {\n        var bytes;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._blockstore.get(cid);\n              case 2:\n                bytes = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  cid: cid,\n                  bytes: bytes\n                });\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function get(_x) {\n        return _get.apply(this, arguments);\n      }\n      return get;\n    }()\n  }, {\n    key: \"blocks\",\n    value: function blocks() {\n      return this._blockstore.blocks();\n    }\n  }, {\n    key: \"cids\",\n    value: function cids() {\n      var _this = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, b;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _iteratorAbruptCompletion = false;\n                _didIteratorError = false;\n                _context3.prev = 2;\n                _iterator = _asyncIterator(_this.blocks());\n              case 4:\n                _context3.next = 6;\n                return _awaitAsyncGenerator(_iterator.next());\n              case 6:\n                if (!(_iteratorAbruptCompletion = !(_step = _context3.sent).done)) {\n                  _context3.next = 13;\n                  break;\n                }\n                b = _step.value;\n                _context3.next = 10;\n                return b.cid;\n              case 10:\n                _iteratorAbruptCompletion = false;\n                _context3.next = 4;\n                break;\n              case 13:\n                _context3.next = 19;\n                break;\n              case 15:\n                _context3.prev = 15;\n                _context3.t0 = _context3[\"catch\"](2);\n                _didIteratorError = true;\n                _iteratorError = _context3.t0;\n              case 19:\n                _context3.prev = 19;\n                _context3.prev = 20;\n                if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                  _context3.next = 24;\n                  break;\n                }\n                _context3.next = 24;\n                return _awaitAsyncGenerator(_iterator.return());\n              case 24:\n                _context3.prev = 24;\n                if (!_didIteratorError) {\n                  _context3.next = 27;\n                  break;\n                }\n                throw _iteratorError;\n              case 27:\n                return _context3.finish(24);\n              case 28:\n                return _context3.finish(19);\n              case 29:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[2, 15, 19, 29], [20,, 24, 28]]);\n      }))();\n    }\n  }]);\n  return BlockstoreCarReader;\n}();","map":{"version":3,"names":["BlockstoreCarReader","version","roots","blockstore","_version","_roots","_blockstore","cid","has","get","bytes","blocks","b"],"sources":["/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/nft.storage/src/bs-car-reader.js"],"sourcesContent":["/**\n * An implementation of the CAR reader interface that is backed by a blockstore.\n *\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('@ipld/car/api').CarReader} CarReader\n * @implements {CarReader}\n */\nexport class BlockstoreCarReader {\n  /**\n   * @param {number} version\n   * @param {CID[]} roots\n   * @param {import('ipfs-car/blockstore').Blockstore} blockstore\n   */\n  constructor(version, roots, blockstore) {\n    /**\n     * @private\n     */\n    this._version = version\n    /**\n     * @private\n     */\n    this._roots = roots\n    /**\n     * @private\n     */\n    this._blockstore = blockstore\n  }\n\n  get version() {\n    return this._version\n  }\n\n  get blockstore() {\n    return this._blockstore\n  }\n\n  async getRoots() {\n    return this._roots\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  has(cid) {\n    return this._blockstore.has(cid)\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  async get(cid) {\n    const bytes = await this._blockstore.get(cid)\n    return { cid, bytes }\n  }\n\n  blocks() {\n    return this._blockstore.blocks()\n  }\n\n  async *cids() {\n    for await (const b of this.blocks()) {\n      yield b.cid\n    }\n  }\n}\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAaA,mBAAmB;EAC9B;AACF;AACA;AACA;AACA;EACE,6BAAYC,OAAO,EAAEC,KAAK,EAAEC,UAAU,EAAE;IAAA;IACtC;AACJ;AACA;IACI,IAAI,CAACC,QAAQ,GAAGH,OAAO;IACvB;AACJ;AACA;IACI,IAAI,CAACI,MAAM,GAAGH,KAAK;IACnB;AACJ;AACA;IACI,IAAI,CAACI,WAAW,GAAGH,UAAU;EAC/B;EAAC;IAAA;IAAA,KAED,eAAc;MACZ,OAAO,IAAI,CAACC,QAAQ;IACtB;EAAC;IAAA;IAAA,KAED,eAAiB;MACf,OAAO,IAAI,CAACE,WAAW;IACzB;EAAC;IAAA;IAAA;MAAA,2EAED;QAAA;UAAA;YAAA;cAAA;gBAAA,iCACS,IAAI,CAACD,MAAM;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACnB;MAAA;QAAA;MAAA;MAAA;IAAA;IAED;AACF;AACA;EAFE;IAAA;IAAA,OAGA,aAAIE,GAAG,EAAE;MACP,OAAO,IAAI,CAACD,WAAW,CAACE,GAAG,CAACD,GAAG,CAAC;IAClC;;IAEA;AACF;AACA;EAFE;IAAA;IAAA;MAAA,sEAGA,kBAAUA,GAAG;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA,OACS,IAAI,CAACD,WAAW,CAACG,GAAG,CAACF,GAAG,CAAC;cAAA;gBAAvCG,KAAK;gBAAA,kCACJ;kBAAEH,GAAG,EAAHA,GAAG;kBAAEG,KAAK,EAALA;gBAAM,CAAC;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CACtB;MAAA;QAAA;MAAA;MAAA;IAAA;EAAA;IAAA;IAAA,OAED,kBAAS;MACP,OAAO,IAAI,CAACJ,WAAW,CAACK,MAAM,EAAE;IAClC;EAAC;IAAA;IAAA,OAED,gBAAc;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA;gBAAA;gBAAA;gBAAA,2BACU,KAAI,CAACA,MAAM,EAAE;cAAA;gBAAA;gBAAA;cAAA;gBAAA;kBAAA;kBAAA;gBAAA;gBAAlBC,CAAC;gBAAA;gBAChB,OAAMA,CAAC,CAACL,GAAG;cAAA;gBAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;kBAAA;kBAAA;gBAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;kBAAA;kBAAA;gBAAA;gBAAA;cAAA;gBAAA;cAAA;gBAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAEf;EAAC;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}