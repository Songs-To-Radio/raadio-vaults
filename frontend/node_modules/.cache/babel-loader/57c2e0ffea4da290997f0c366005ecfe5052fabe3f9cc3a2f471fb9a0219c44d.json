{"ast":null,"code":"import _regeneratorRuntime from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _awaitAsyncGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport parallelBatch from 'it-parallel-batch';\nimport defaultOptions from './options.js';\nimport dagBuilderFn from './dag-builder/index.js';\nimport treeBuilderFn from './tree-builder.js';\nexport function importer(_x, _x2) {\n  return _importer.apply(this, arguments);\n}\nfunction _importer() {\n  _importer = _wrapAsyncGenerator(function (source, blockstore) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var opts, dagBuilder, treeBuilder, candidates, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, entry;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              opts = defaultOptions(options);\n              if (typeof options.dagBuilder === 'function') {\n                dagBuilder = options.dagBuilder;\n              } else {\n                dagBuilder = dagBuilderFn;\n              }\n              if (typeof options.treeBuilder === 'function') {\n                treeBuilder = options.treeBuilder;\n              } else {\n                treeBuilder = treeBuilderFn;\n              }\n              if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n                candidates = source;\n              } else {\n                candidates = [source];\n              }\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 6;\n              _iterator = _asyncIterator(treeBuilder(parallelBatch(dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts));\n            case 8:\n              _context.next = 10;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 10:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 17;\n                break;\n              }\n              entry = _step.value;\n              _context.next = 14;\n              return {\n                cid: entry.cid,\n                path: entry.path,\n                unixfs: entry.unixfs,\n                size: entry.size\n              };\n            case 14:\n              _iteratorAbruptCompletion = false;\n              _context.next = 8;\n              break;\n            case 17:\n              _context.next = 23;\n              break;\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](6);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 23:\n              _context.prev = 23;\n              _context.prev = 24;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 28;\n                break;\n              }\n              _context.next = 28;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 28:\n              _context.prev = 28;\n              if (!_didIteratorError) {\n                _context.next = 31;\n                break;\n              }\n              throw _iteratorError;\n            case 31:\n              return _context.finish(28);\n            case 32:\n              return _context.finish(23);\n            case 33:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[6, 19, 23, 33], [24,, 28, 32]]);\n    })();\n  });\n  return _importer.apply(this, arguments);\n}","map":{"version":3,"names":["parallelBatch","defaultOptions","dagBuilderFn","treeBuilderFn","importer","source","blockstore","options","opts","dagBuilder","treeBuilder","Symbol","asyncIterator","iterator","candidates","fileImportConcurrency","entry","cid","path","unixfs","size"],"sources":["/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/ipfs-unixfs-importer/esm/src/index.js"],"sourcesContent":["import parallelBatch from 'it-parallel-batch';\nimport defaultOptions from './options.js';\nimport dagBuilderFn from './dag-builder/index.js';\nimport treeBuilderFn from './tree-builder.js';\nexport async function* importer(source, blockstore, options = {}) {\n  const opts = defaultOptions(options);\n  let dagBuilder;\n  if (typeof options.dagBuilder === 'function') {\n    dagBuilder = options.dagBuilder;\n  } else {\n    dagBuilder = dagBuilderFn;\n  }\n  let treeBuilder;\n  if (typeof options.treeBuilder === 'function') {\n    treeBuilder = options.treeBuilder;\n  } else {\n    treeBuilder = treeBuilderFn;\n  }\n  let candidates;\n  if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n    candidates = source;\n  } else {\n    candidates = [source];\n  }\n  for await (const entry of treeBuilder(parallelBatch(dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    };\n  }\n}"],"mappings":";;;;AAAA,OAAOA,aAAa,MAAM,mBAAmB;AAC7C,OAAOC,cAAc,MAAM,cAAc;AACzC,OAAOC,YAAY,MAAM,wBAAwB;AACjD,OAAOC,aAAa,MAAM,mBAAmB;AAC7C,gBAAuBC,QAAQ;EAAA;AAAA;AA4B9B;EAAA,gCA5BM,UAAyBC,MAAM,EAAEC,UAAU;IAAA,IAAEC,OAAO,uEAAG,CAAC,CAAC;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cACxDC,IAAI,GAAGP,cAAc,CAACM,OAAO,CAAC;cAEpC,IAAI,OAAOA,OAAO,CAACE,UAAU,KAAK,UAAU,EAAE;gBAC5CA,UAAU,GAAGF,OAAO,CAACE,UAAU;cACjC,CAAC,MAAM;gBACLA,UAAU,GAAGP,YAAY;cAC3B;cAEA,IAAI,OAAOK,OAAO,CAACG,WAAW,KAAK,UAAU,EAAE;gBAC7CA,WAAW,GAAGH,OAAO,CAACG,WAAW;cACnC,CAAC,MAAM;gBACLA,WAAW,GAAGP,aAAa;cAC7B;cAEA,IAAIQ,MAAM,CAACC,aAAa,IAAIP,MAAM,IAAIM,MAAM,CAACE,QAAQ,IAAIR,MAAM,EAAE;gBAC/DS,UAAU,GAAGT,MAAM;cACrB,CAAC,MAAM;gBACLS,UAAU,GAAG,CAACT,MAAM,CAAC;cACvB;cAAC;cAAA;cAAA;cAAA,2BACyBK,WAAW,CAACV,aAAa,CAACS,UAAU,CAACK,UAAU,EAAER,UAAU,EAAEE,IAAI,CAAC,EAAEA,IAAI,CAACO,qBAAqB,CAAC,EAAET,UAAU,EAAEE,IAAI,CAAC;YAAA;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAA3HQ,KAAK;cAAA;cACpB,OAAM;gBACJC,GAAG,EAAED,KAAK,CAACC,GAAG;gBACdC,IAAI,EAAEF,KAAK,CAACE,IAAI;gBAChBC,MAAM,EAAEH,KAAK,CAACG,MAAM;gBACpBC,IAAI,EAAEJ,KAAK,CAACI;cACd,CAAC;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;YAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAAA,CAEJ;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}