{"ast":null,"code":"'use strict';\n\n/**\n * Takes an (async) iterable that emits things and returns an async iterable that\n * emits those things in fixed-sized batches.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T[]>}\n */\nvar _regeneratorRuntime = require(\"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _awaitAsyncGenerator = require(\"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/awaitAsyncGenerator.js\").default;\nvar _wrapAsyncGenerator = require(\"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/wrapAsyncGenerator.js\").default;\nvar _asyncIterator = require(\"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/asyncIterator.js\").default;\nfunction batch(_x) {\n  return _batch.apply(this, arguments);\n}\nfunction _batch() {\n  _batch = _wrapAsyncGenerator(function (source) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var things, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, thing;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              /** @type {T[]} */\n              things = [];\n              if (size < 1) {\n                size = 1;\n              }\n              _iteratorAbruptCompletion = false;\n              _didIteratorError = false;\n              _context.prev = 4;\n              _iterator = _asyncIterator(source);\n            case 6:\n              _context.next = 8;\n              return _awaitAsyncGenerator(_iterator.next());\n            case 8:\n              if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                _context.next = 20;\n                break;\n              }\n              thing = _step.value;\n              things.push(thing);\n            case 11:\n              if (!(things.length >= size)) {\n                _context.next = 17;\n                break;\n              }\n              _context.next = 14;\n              return things.slice(0, size);\n            case 14:\n              things = things.slice(size);\n              _context.next = 11;\n              break;\n            case 17:\n              _iteratorAbruptCompletion = false;\n              _context.next = 6;\n              break;\n            case 20:\n              _context.next = 26;\n              break;\n            case 22:\n              _context.prev = 22;\n              _context.t0 = _context[\"catch\"](4);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n            case 26:\n              _context.prev = 26;\n              _context.prev = 27;\n              if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                _context.next = 31;\n                break;\n              }\n              _context.next = 31;\n              return _awaitAsyncGenerator(_iterator.return());\n            case 31:\n              _context.prev = 31;\n              if (!_didIteratorError) {\n                _context.next = 34;\n                break;\n              }\n              throw _iteratorError;\n            case 34:\n              return _context.finish(31);\n            case 35:\n              return _context.finish(26);\n            case 36:\n              if (!things.length) {\n                _context.next = 42;\n                break;\n              }\n              _context.next = 39;\n              return things.slice(0, size);\n            case 39:\n              things = things.slice(size);\n              _context.next = 36;\n              break;\n            case 42:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[4, 22, 26, 36], [27,, 31, 35]]);\n    })();\n  });\n  return _batch.apply(this, arguments);\n}\nmodule.exports = batch;","map":{"version":3,"names":["batch","source","size","things","thing","push","length","slice","module","exports"],"sources":["/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/it-batch/index.js"],"sourcesContent":["'use strict'\n\n/**\n * Takes an (async) iterable that emits things and returns an async iterable that\n * emits those things in fixed-sized batches.\n *\n * @template T\n * @param {AsyncIterable<T>|Iterable<T>} source\n * @param {number} [size=1]\n * @returns {AsyncIterable<T[]>}\n */\nasync function * batch (source, size = 1) {\n  /** @type {T[]} */\n  let things = []\n\n  if (size < 1) {\n    size = 1\n  }\n\n  for await (const thing of source) {\n    things.push(thing)\n\n    while (things.length >= size) {\n      yield things.slice(0, size)\n\n      things = things.slice(size)\n    }\n  }\n\n  while (things.length) {\n    yield things.slice(0, size)\n\n    things = things.slice(size)\n  }\n}\n\nmodule.exports = batch\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA,SASiBA,KAAK;EAAA;AAAA;AAAA;EAAA,6BAAtB,UAAwBC,MAAM;IAAA,IAAEC,IAAI,uEAAG,CAAC;IAAA;MAAA;MAAA;QAAA;UAAA;YAAA;cACtC;cACIC,MAAM,GAAG,EAAE;cAEf,IAAID,IAAI,GAAG,CAAC,EAAE;gBACZA,IAAI,GAAG,CAAC;cACV;cAAC;cAAA;cAAA;cAAA,2BAEyBD,MAAM;YAAA;cAAA;cAAA;YAAA;cAAA;gBAAA;gBAAA;cAAA;cAAfG,KAAK;cACpBD,MAAM,CAACE,IAAI,CAACD,KAAK,CAAC;YAAA;cAAA,MAEXD,MAAM,CAACG,MAAM,IAAIJ,IAAI;gBAAA;gBAAA;cAAA;cAAA;cAC1B,OAAMC,MAAM,CAACI,KAAK,CAAC,CAAC,EAAEL,IAAI,CAAC;YAAA;cAE3BC,MAAM,GAAGA,MAAM,CAACI,KAAK,CAACL,IAAI,CAAC;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;cAAA;YAAA;cAAA;cAAA;gBAAA;gBAAA;cAAA;cAAA;YAAA;cAAA;YAAA;cAAA;YAAA;cAAA,KAIxBC,MAAM,CAACG,MAAM;gBAAA;gBAAA;cAAA;cAAA;cAClB,OAAMH,MAAM,CAACI,KAAK,CAAC,CAAC,EAAEL,IAAI,CAAC;YAAA;cAE3BC,MAAM,GAAGA,MAAM,CAACI,KAAK,CAACL,IAAI,CAAC;cAAA;cAAA;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAAA,CAE9B;EAAA;AAAA;AAEDM,MAAM,CAACC,OAAO,GAAGT,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}