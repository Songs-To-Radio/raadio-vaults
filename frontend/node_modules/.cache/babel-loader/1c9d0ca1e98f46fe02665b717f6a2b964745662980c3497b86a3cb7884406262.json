{"ast":null,"code":"import _regeneratorRuntime from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _awaitAsyncGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport { CID } from 'multiformats';\nimport { BaseBlockstore } from 'blockstore-core';\nexport var MemoryBlockStore = /*#__PURE__*/function (_BaseBlockstore) {\n  _inherits(MemoryBlockStore, _BaseBlockstore);\n  var _super = _createSuper(MemoryBlockStore);\n  function MemoryBlockStore() {\n    var _this2;\n    _classCallCheck(this, MemoryBlockStore);\n    _this2 = _super.call(this);\n    _this2.store = new Map();\n    return _this2;\n  }\n  _createClass(MemoryBlockStore, [{\n    key: \"blocks\",\n    value: function blocks() {\n      var _this = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _iterator, _step, _step$value, cidStr, bytes;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _iterator = _createForOfIteratorHelper(_this.store.entries());\n                _context.prev = 1;\n                _iterator.s();\n              case 3:\n                if ((_step = _iterator.n()).done) {\n                  _context.next = 9;\n                  break;\n                }\n                _step$value = _slicedToArray(_step.value, 2), cidStr = _step$value[0], bytes = _step$value[1];\n                _context.next = 7;\n                return {\n                  cid: CID.parse(cidStr),\n                  bytes: bytes\n                };\n              case 7:\n                _context.next = 3;\n                break;\n              case 9:\n                _context.next = 14;\n                break;\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](1);\n                _iterator.e(_context.t0);\n              case 14:\n                _context.prev = 14;\n                _iterator.f();\n                return _context.finish(14);\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 11, 14, 17]]);\n      }))();\n    }\n  }, {\n    key: \"put\",\n    value: function put(cid, bytes) {\n      this.store.set(cid.toString(), bytes);\n      return Promise.resolve();\n    }\n  }, {\n    key: \"get\",\n    value: function get(cid) {\n      var bytes = this.store.get(cid.toString());\n      if (!bytes) {\n        throw new Error(\"block with cid \".concat(cid.toString(), \" no found\"));\n      }\n      return Promise.resolve(bytes);\n    }\n  }, {\n    key: \"has\",\n    value: function has(cid) {\n      return Promise.resolve(this.store.has(cid.toString()));\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.store.clear();\n      return Promise.resolve();\n    }\n  }]);\n  return MemoryBlockStore;\n}(BaseBlockstore);","map":{"version":3,"names":["CID","BaseBlockstore","MemoryBlockStore","store","Map","entries","cidStr","bytes","cid","parse","set","toString","Promise","resolve","get","Error","has","clear"],"sources":["/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/ipfs-car/dist/esm/blockstore/memory.js"],"sourcesContent":["import { CID } from 'multiformats';\nimport { BaseBlockstore } from 'blockstore-core';\nexport class MemoryBlockStore extends BaseBlockstore {\n    constructor() {\n        super();\n        this.store = new Map();\n    }\n    async *blocks() {\n        for (const [cidStr, bytes] of this.store.entries()) {\n            yield { cid: CID.parse(cidStr), bytes };\n        }\n    }\n    put(cid, bytes) {\n        this.store.set(cid.toString(), bytes);\n        return Promise.resolve();\n    }\n    get(cid) {\n        const bytes = this.store.get(cid.toString());\n        if (!bytes) {\n            throw new Error(`block with cid ${cid.toString()} no found`);\n        }\n        return Promise.resolve(bytes);\n    }\n    has(cid) {\n        return Promise.resolve(this.store.has(cid.toString()));\n    }\n    close() {\n        this.store.clear();\n        return Promise.resolve();\n    }\n}\n"],"mappings":";;;;;;;;;AAAA,SAASA,GAAG,QAAQ,cAAc;AAClC,SAASC,cAAc,QAAQ,iBAAiB;AAChD,WAAaC,gBAAgB;EAAA;EAAA;EACzB,4BAAc;IAAA;IAAA;IACV;IACA,OAAKC,KAAK,GAAG,IAAIC,GAAG,EAAE;IAAC;EAC3B;EAAC;IAAA;IAAA,OACD,kBAAgB;MAAA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,uCACkB,KAAI,CAACD,KAAK,CAACE,OAAO,EAAE;gBAAA;gBAAA;cAAA;gBAAA;kBAAA;kBAAA;gBAAA;gBAAA,8CAAtCC,MAAM,mBAAEC,KAAK;gBAAA;gBACrB,OAAM;kBAAEC,GAAG,EAAER,GAAG,CAACS,KAAK,CAACH,MAAM,CAAC;kBAAEC,KAAK,EAALA;gBAAM,CAAC;cAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAE/C;EAAC;IAAA;IAAA,OACD,aAAIC,GAAG,EAAED,KAAK,EAAE;MACZ,IAAI,CAACJ,KAAK,CAACO,GAAG,CAACF,GAAG,CAACG,QAAQ,EAAE,EAAEJ,KAAK,CAAC;MACrC,OAAOK,OAAO,CAACC,OAAO,EAAE;IAC5B;EAAC;IAAA;IAAA,OACD,aAAIL,GAAG,EAAE;MACL,IAAMD,KAAK,GAAG,IAAI,CAACJ,KAAK,CAACW,GAAG,CAACN,GAAG,CAACG,QAAQ,EAAE,CAAC;MAC5C,IAAI,CAACJ,KAAK,EAAE;QACR,MAAM,IAAIQ,KAAK,0BAAmBP,GAAG,CAACG,QAAQ,EAAE,eAAY;MAChE;MACA,OAAOC,OAAO,CAACC,OAAO,CAACN,KAAK,CAAC;IACjC;EAAC;IAAA;IAAA,OACD,aAAIC,GAAG,EAAE;MACL,OAAOI,OAAO,CAACC,OAAO,CAAC,IAAI,CAACV,KAAK,CAACa,GAAG,CAACR,GAAG,CAACG,QAAQ,EAAE,CAAC,CAAC;IAC1D;EAAC;IAAA;IAAA,OACD,iBAAQ;MACJ,IAAI,CAACR,KAAK,CAACc,KAAK,EAAE;MAClB,OAAOL,OAAO,CAACC,OAAO,EAAE;IAC5B;EAAC;EAAA;AAAA,EA3BiCZ,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}