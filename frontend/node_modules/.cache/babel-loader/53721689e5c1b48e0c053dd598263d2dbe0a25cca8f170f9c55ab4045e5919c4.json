{"ast":null,"code":"import _inherits from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { asyncIterableReader, bytesReader, createDecoder } from './decoder.js';\nexport var CarIteratorBase = /*#__PURE__*/function () {\n  function CarIteratorBase(version, roots, iterable) {\n    _classCallCheck(this, CarIteratorBase);\n    this._version = version;\n    this._roots = roots;\n    this._iterable = iterable;\n    this._decoded = false;\n  }\n  _createClass(CarIteratorBase, [{\n    key: \"version\",\n    get: function get() {\n      return this._version;\n    }\n  }, {\n    key: \"getRoots\",\n    value: function () {\n      var _getRoots = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this._roots);\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function getRoots() {\n        return _getRoots.apply(this, arguments);\n      }\n      return getRoots;\n    }()\n  }]);\n  return CarIteratorBase;\n}();\nexport var CarBlockIterator = /*#__PURE__*/function (_CarIteratorBase, _Symbol$asyncIterator) {\n  _inherits(CarBlockIterator, _CarIteratorBase);\n  var _super = _createSuper(CarBlockIterator);\n  function CarBlockIterator() {\n    _classCallCheck(this, CarBlockIterator);\n    return _super.apply(this, arguments);\n  }\n  _createClass(CarBlockIterator, [{\n    key: _Symbol$asyncIterator,\n    value: function value() {\n      if (this._decoded) {\n        throw new Error('Cannot decode more than once');\n      }\n      if (!this._iterable) {\n        throw new Error('Block iterable not found');\n      }\n      this._decoded = true;\n      return this._iterable[Symbol.asyncIterator]();\n    }\n  }], [{\n    key: \"fromBytes\",\n    value: function () {\n      var _fromBytes2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(bytes) {\n        var _yield$_fromBytes, version, roots, iterator;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _fromBytes(bytes);\n              case 2:\n                _yield$_fromBytes = _context2.sent;\n                version = _yield$_fromBytes.version;\n                roots = _yield$_fromBytes.roots;\n                iterator = _yield$_fromBytes.iterator;\n                return _context2.abrupt(\"return\", new CarBlockIterator(version, roots, iterator));\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      function fromBytes(_x) {\n        return _fromBytes2.apply(this, arguments);\n      }\n      return fromBytes;\n    }()\n  }, {\n    key: \"fromIterable\",\n    value: function () {\n      var _fromIterable2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(asyncIterable) {\n        var _yield$_fromIterable, version, roots, iterator;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return _fromIterable(asyncIterable);\n              case 2:\n                _yield$_fromIterable = _context3.sent;\n                version = _yield$_fromIterable.version;\n                roots = _yield$_fromIterable.roots;\n                iterator = _yield$_fromIterable.iterator;\n                return _context3.abrupt(\"return\", new CarBlockIterator(version, roots, iterator));\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n      function fromIterable(_x2) {\n        return _fromIterable2.apply(this, arguments);\n      }\n      return fromIterable;\n    }()\n  }]);\n  return CarBlockIterator;\n}(CarIteratorBase, Symbol.asyncIterator);\nexport var CarCIDIterator = /*#__PURE__*/function (_CarIteratorBase2, _Symbol$asyncIterator2) {\n  _inherits(CarCIDIterator, _CarIteratorBase2);\n  var _super2 = _createSuper(CarCIDIterator);\n  function CarCIDIterator() {\n    _classCallCheck(this, CarCIDIterator);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(CarCIDIterator, [{\n    key: _Symbol$asyncIterator2,\n    value: function value() {\n      if (this._decoded) {\n        throw new Error('Cannot decode more than once');\n      }\n      if (!this._iterable) {\n        throw new Error('Block iterable not found');\n      }\n      this._decoded = true;\n      var iterable = this._iterable[Symbol.asyncIterator]();\n      return {\n        next: function next() {\n          return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n            var next;\n            return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return iterable.next();\n                  case 2:\n                    next = _context4.sent;\n                    if (!next.done) {\n                      _context4.next = 5;\n                      break;\n                    }\n                    return _context4.abrupt(\"return\", next);\n                  case 5:\n                    return _context4.abrupt(\"return\", {\n                      done: false,\n                      value: next.value.cid\n                    });\n                  case 6:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4);\n          }))();\n        }\n      };\n    }\n  }], [{\n    key: \"fromBytes\",\n    value: function () {\n      var _fromBytes3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(bytes) {\n        var _yield$_fromBytes2, version, roots, iterator;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return _fromBytes(bytes);\n              case 2:\n                _yield$_fromBytes2 = _context5.sent;\n                version = _yield$_fromBytes2.version;\n                roots = _yield$_fromBytes2.roots;\n                iterator = _yield$_fromBytes2.iterator;\n                return _context5.abrupt(\"return\", new CarCIDIterator(version, roots, iterator));\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n      function fromBytes(_x3) {\n        return _fromBytes3.apply(this, arguments);\n      }\n      return fromBytes;\n    }()\n  }, {\n    key: \"fromIterable\",\n    value: function () {\n      var _fromIterable3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(asyncIterable) {\n        var _yield$_fromIterable2, version, roots, iterator;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _fromIterable(asyncIterable);\n              case 2:\n                _yield$_fromIterable2 = _context6.sent;\n                version = _yield$_fromIterable2.version;\n                roots = _yield$_fromIterable2.roots;\n                iterator = _yield$_fromIterable2.iterator;\n                return _context6.abrupt(\"return\", new CarCIDIterator(version, roots, iterator));\n              case 7:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n      function fromIterable(_x4) {\n        return _fromIterable3.apply(this, arguments);\n      }\n      return fromIterable;\n    }()\n  }]);\n  return CarCIDIterator;\n}(CarIteratorBase, Symbol.asyncIterator);\nfunction _fromBytes(_x5) {\n  return _fromBytes4.apply(this, arguments);\n}\nfunction _fromBytes4() {\n  _fromBytes4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(bytes) {\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            if (bytes instanceof Uint8Array) {\n              _context7.next = 2;\n              break;\n            }\n            throw new TypeError('fromBytes() requires a Uint8Array');\n          case 2:\n            return _context7.abrupt(\"return\", decodeIterator(bytesReader(bytes)));\n          case 3:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _fromBytes4.apply(this, arguments);\n}\nfunction _fromIterable(_x6) {\n  return _fromIterable4.apply(this, arguments);\n}\nfunction _fromIterable4() {\n  _fromIterable4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(asyncIterable) {\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            if (!(!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === 'function'))) {\n              _context8.next = 2;\n              break;\n            }\n            throw new TypeError('fromIterable() requires an async iterable');\n          case 2:\n            return _context8.abrupt(\"return\", decodeIterator(asyncIterableReader(asyncIterable)));\n          case 3:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _fromIterable4.apply(this, arguments);\n}\nfunction decodeIterator(_x7) {\n  return _decodeIterator.apply(this, arguments);\n}\nfunction _decodeIterator() {\n  _decodeIterator = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(reader) {\n    var decoder, _yield$decoder$header, version, roots;\n    return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            decoder = createDecoder(reader);\n            _context9.next = 3;\n            return decoder.header();\n          case 3:\n            _yield$decoder$header = _context9.sent;\n            version = _yield$decoder$header.version;\n            roots = _yield$decoder$header.roots;\n            return _context9.abrupt(\"return\", {\n              version: version,\n              roots: roots,\n              iterator: decoder.blocks()\n            });\n          case 7:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _decodeIterator.apply(this, arguments);\n}","map":{"version":3,"names":["asyncIterableReader","bytesReader","createDecoder","CarIteratorBase","version","roots","iterable","_version","_roots","_iterable","_decoded","CarBlockIterator","Error","Symbol","asyncIterator","bytes","fromBytes","iterator","asyncIterable","fromIterable","CarCIDIterator","next","done","value","cid","Uint8Array","TypeError","decodeIterator","reader","decoder","header","blocks"],"sources":["/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@ipld/car/esm/lib/iterator.js"],"sourcesContent":["import {\n  asyncIterableReader,\n  bytesReader,\n  createDecoder\n} from './decoder.js';\nexport class CarIteratorBase {\n  constructor(version, roots, iterable) {\n    this._version = version;\n    this._roots = roots;\n    this._iterable = iterable;\n    this._decoded = false;\n  }\n  get version() {\n    return this._version;\n  }\n  async getRoots() {\n    return this._roots;\n  }\n}\nexport class CarBlockIterator extends CarIteratorBase {\n  [Symbol.asyncIterator]() {\n    if (this._decoded) {\n      throw new Error('Cannot decode more than once');\n    }\n    if (!this._iterable) {\n      throw new Error('Block iterable not found');\n    }\n    this._decoded = true;\n    return this._iterable[Symbol.asyncIterator]();\n  }\n  static async fromBytes(bytes) {\n    const {version, roots, iterator} = await fromBytes(bytes);\n    return new CarBlockIterator(version, roots, iterator);\n  }\n  static async fromIterable(asyncIterable) {\n    const {version, roots, iterator} = await fromIterable(asyncIterable);\n    return new CarBlockIterator(version, roots, iterator);\n  }\n}\nexport class CarCIDIterator extends CarIteratorBase {\n  [Symbol.asyncIterator]() {\n    if (this._decoded) {\n      throw new Error('Cannot decode more than once');\n    }\n    if (!this._iterable) {\n      throw new Error('Block iterable not found');\n    }\n    this._decoded = true;\n    const iterable = this._iterable[Symbol.asyncIterator]();\n    return {\n      async next() {\n        const next = await iterable.next();\n        if (next.done) {\n          return next;\n        }\n        return {\n          done: false,\n          value: next.value.cid\n        };\n      }\n    };\n  }\n  static async fromBytes(bytes) {\n    const {version, roots, iterator} = await fromBytes(bytes);\n    return new CarCIDIterator(version, roots, iterator);\n  }\n  static async fromIterable(asyncIterable) {\n    const {version, roots, iterator} = await fromIterable(asyncIterable);\n    return new CarCIDIterator(version, roots, iterator);\n  }\n}\nasync function fromBytes(bytes) {\n  if (!(bytes instanceof Uint8Array)) {\n    throw new TypeError('fromBytes() requires a Uint8Array');\n  }\n  return decodeIterator(bytesReader(bytes));\n}\nasync function fromIterable(asyncIterable) {\n  if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === 'function')) {\n    throw new TypeError('fromIterable() requires an async iterable');\n  }\n  return decodeIterator(asyncIterableReader(asyncIterable));\n}\nasync function decodeIterator(reader) {\n  const decoder = createDecoder(reader);\n  const {version, roots} = await decoder.header();\n  return {\n    version,\n    roots,\n    iterator: decoder.blocks()\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}