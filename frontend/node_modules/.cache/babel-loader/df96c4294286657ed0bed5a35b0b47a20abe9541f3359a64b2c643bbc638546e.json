{"ast":null,"code":"var _jsxFileName = \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/src/components/whitelist.jsx\",\n  _s = $RefreshSig$();\nimport Text from \"./texts\";\nimport Button from \"./button\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { UserContext } from \"../contexts/user.contexts\";\nimport { saveWhiteList } from \"../api/api\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Whitelist() {\n  _s();\n  const {\n    user,\n    setUser,\n    setVaults\n  } = useContext(UserContext);\n  const [list, setList] = useState(\"\");\n  function save() {\n    toast.promise(async () => {\n      try {\n        return await saveWhiteList(whiteList, add);\n      } catch (error) {\n        console.log(error);\n        throw error;\n      }\n    }, {\n      pending: \"Saving WhiteList\",\n      success: {\n        render(_ref) {\n          let {\n            data\n          } = _ref;\n          setUser(data.user);\n          setVaults(data.metadatas);\n          return `Success!`;\n        }\n      },\n      error: {\n        render(_ref2) {\n          let {\n            data\n          } = _ref2;\n          return \"Oops! Something went wrong\";\n        }\n      }\n    });\n  }\n  useEffect(() => {\n    if (user) {\n      let list = user.whiteList.join(\", \");\n      setList(list);\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"my-20\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        size: \"mid\",\n        cls: \"text-[18px] font-semibold pl-5 w-fit m-auto\",\n        children: \"Whitelisted Domains\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        cls: \"text-center my-3\",\n        children: \"The following Domains would be given access to Masked Stream your media from IPFS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"m-auto block text-[13px] my-10 border rounded-xl border-theme-red w-[300px] p-3\",\n        rows: 4,\n        value: list,\n        onChange: e => {\n          let val = e.target.value;\n          setList(val);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        label: \"save\",\n        cls: \"block m-auto\",\n        onClick: save\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(Whitelist, \"wIbEH8lEl+60GMwrRtXsNcBfOXY=\");\n_c = Whitelist;\nvar _c;\n$RefreshReg$(_c, \"Whitelist\");","map":{"version":3,"names":["Text","Button","useContext","useEffect","useState","UserContext","saveWhiteList","toast","Whitelist","user","setUser","setVaults","list","setList","save","promise","whiteList","add","error","console","log","pending","success","render","data","metadatas","join","e","val","target","value"],"sources":["/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/src/components/whitelist.jsx"],"sourcesContent":["import Text from \"./texts\";\nimport Button from \"./button\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { UserContext } from \"../contexts/user.contexts\";\nimport { saveWhiteList } from \"../api/api\";\nimport { toast } from \"react-toastify\";\n\nexport default function Whitelist() {\n  const { user, setUser, setVaults } = useContext(UserContext);\n  const [list, setList] = useState(\"\");\n\n  function save() {\n    toast.promise(\n      async () => {\n        try {\n          return await saveWhiteList(whiteList, add);\n        } catch (error) {\n          console.log(error);\n          throw error;\n        }\n      },\n      {\n        pending: \"Saving WhiteList\",\n        success: {\n          render({ data }) {\n            setUser(data.user);\n            setVaults(data.metadatas);\n            return `Success!`;\n          },\n        },\n        error: {\n          render({ data }) {\n            return \"Oops! Something went wrong\";\n          },\n        },\n      }\n    );\n  }\n\n  useEffect(() => {\n    if (user) {\n      let list = user.whiteList.join(\", \");\n      setList(list);\n    }\n  }, [user]);\n\n  return (\n    <div>\n      <div className=\"my-20\">\n        <Text size=\"mid\" cls={\"text-[18px] font-semibold pl-5 w-fit m-auto\"}>\n          Whitelisted Domains\n        </Text>\n        <Text cls={\"text-center my-3\"}>\n          The following Domains would be given access to Masked Stream your\n          media from IPFS\n        </Text>\n\n        <textarea\n          className=\"m-auto block text-[13px] my-10 border rounded-xl border-theme-red w-[300px] p-3\"\n          rows={4}\n          value={list}\n          onChange={(e) => {\n            let val = e.target.value;\n            setList(val);\n          }}\n        ></textarea>\n        <Button label={\"save\"} cls={\"block m-auto\"} onClick={save} />\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,SAAS;AAC1B,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACvD,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,aAAa,QAAQ,YAAY;AAC1C,SAASC,KAAK,QAAQ,gBAAgB;AAAC;AAEvC,eAAe,SAASC,SAAS,GAAG;EAAA;EAClC,MAAM;IAAEC,IAAI;IAAEC,OAAO;IAAEC;EAAU,CAAC,GAAGT,UAAU,CAACG,WAAW,CAAC;EAC5D,MAAM,CAACO,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpC,SAASU,IAAI,GAAG;IACdP,KAAK,CAACQ,OAAO,CACX,YAAY;MACV,IAAI;QACF,OAAO,MAAMT,aAAa,CAACU,SAAS,EAAEC,GAAG,CAAC;MAC5C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClB,MAAMA,KAAK;MACb;IACF,CAAC,EACD;MACEG,OAAO,EAAE,kBAAkB;MAC3BC,OAAO,EAAE;QACPC,MAAM,OAAW;UAAA,IAAV;YAAEC;UAAK,CAAC;UACbd,OAAO,CAACc,IAAI,CAACf,IAAI,CAAC;UAClBE,SAAS,CAACa,IAAI,CAACC,SAAS,CAAC;UACzB,OAAQ,UAAS;QACnB;MACF,CAAC;MACDP,KAAK,EAAE;QACLK,MAAM,QAAW;UAAA,IAAV;YAAEC;UAAK,CAAC;UACb,OAAO,4BAA4B;QACrC;MACF;IACF,CAAC,CACF;EACH;EAEArB,SAAS,CAAC,MAAM;IACd,IAAIM,IAAI,EAAE;MACR,IAAIG,IAAI,GAAGH,IAAI,CAACO,SAAS,CAACU,IAAI,CAAC,IAAI,CAAC;MACpCb,OAAO,CAACD,IAAI,CAAC;IACf;EACF,CAAC,EAAE,CAACH,IAAI,CAAC,CAAC;EAEV,oBACE;IAAA,uBACE;MAAK,SAAS,EAAC,OAAO;MAAA,wBACpB,QAAC,IAAI;QAAC,IAAI,EAAC,KAAK;QAAC,GAAG,EAAE,6CAA8C;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAE7D,eACP,QAAC,IAAI;QAAC,GAAG,EAAE,kBAAmB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAGvB,eAEP;QACE,SAAS,EAAC,iFAAiF;QAC3F,IAAI,EAAE,CAAE;QACR,KAAK,EAAEG,IAAK;QACZ,QAAQ,EAAGe,CAAC,IAAK;UACf,IAAIC,GAAG,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;UACxBjB,OAAO,CAACe,GAAG,CAAC;QACd;MAAE;QAAA;QAAA;QAAA;MAAA,QACQ,eACZ,QAAC,MAAM;QAAC,KAAK,EAAE,MAAO;QAAC,GAAG,EAAE,cAAe;QAAC,OAAO,EAAEd;MAAK;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA;EACzD;IAAA;IAAA;IAAA;EAAA,QACF;AAEV;AAAC,GA/DuBN,SAAS;AAAA,KAATA,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}