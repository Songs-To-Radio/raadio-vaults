{"ast":null,"code":"import _objectSpread from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _asyncToGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _awaitAsyncGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport errCode from 'err-code';\nimport { UnixFS } from 'ipfs-unixfs';\nimport persist from '../../utils/persist.js';\nimport { encode, prepare } from '@ipld/dag-pb';\nimport parallelBatch from 'it-parallel-batch';\nimport * as rawCodec from 'multiformats/codecs/raw';\nimport * as dagPb from '@ipld/dag-pb';\nimport dagFlat from './flat.js';\nimport dagBalanced from './balanced.js';\nimport dagTrickle from './trickle.js';\nimport bufferImporterFn from './buffer-importer.js';\nvar dagBuilders = {\n  flat: dagFlat,\n  balanced: dagBalanced,\n  trickle: dagTrickle\n};\nfunction buildFileBatch(_x, _x2, _x3) {\n  return _buildFileBatch.apply(this, arguments);\n}\nfunction _buildFileBatch() {\n  _buildFileBatch = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(file, blockstore, options) {\n    var count, previous, bufferImporter, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, entry;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            count = -1;\n            if (typeof options.bufferImporter === 'function') {\n              bufferImporter = options.bufferImporter;\n            } else {\n              bufferImporter = bufferImporterFn;\n            }\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context.prev = 4;\n            _iterator = _asyncIterator(parallelBatch(bufferImporter(file, blockstore, options), options.blockWriteConcurrency));\n          case 6:\n            _context.next = 8;\n            return _awaitAsyncGenerator(_iterator.next());\n          case 8:\n            if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n              _context.next = 25;\n              break;\n            }\n            entry = _step.value;\n            count++;\n            if (!(count === 0)) {\n              _context.next = 16;\n              break;\n            }\n            previous = entry;\n            return _context.abrupt(\"continue\", 22);\n          case 16:\n            if (!(count === 1 && previous)) {\n              _context.next = 20;\n              break;\n            }\n            _context.next = 19;\n            return previous;\n          case 19:\n            previous = null;\n          case 20:\n            _context.next = 22;\n            return entry;\n          case 22:\n            _iteratorAbruptCompletion = false;\n            _context.next = 6;\n            break;\n          case 25:\n            _context.next = 31;\n            break;\n          case 27:\n            _context.prev = 27;\n            _context.t0 = _context[\"catch\"](4);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n          case 31:\n            _context.prev = 31;\n            _context.prev = 32;\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context.next = 36;\n              break;\n            }\n            _context.next = 36;\n            return _awaitAsyncGenerator(_iterator.return());\n          case 36:\n            _context.prev = 36;\n            if (!_didIteratorError) {\n              _context.next = 39;\n              break;\n            }\n            throw _iteratorError;\n          case 39:\n            return _context.finish(36);\n          case 40:\n            return _context.finish(31);\n          case 41:\n            if (!previous) {\n              _context.next = 45;\n              break;\n            }\n            previous.single = true;\n            _context.next = 45;\n            return previous;\n          case 45:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 27, 31, 41], [32,, 36, 40]]);\n  }));\n  return _buildFileBatch.apply(this, arguments);\n}\nvar reduce = function reduce(file, blockstore, options) {\n  function reducer(_x4) {\n    return _reducer.apply(this, arguments);\n  }\n  function _reducer() {\n    _reducer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(leaves) {\n      var leaf, _buffer, f, links, node, buffer, cid;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf)) {\n                _context2.next = 13;\n                break;\n              }\n              leaf = leaves[0];\n              if (!(file.mtime !== undefined || file.mode !== undefined)) {\n                _context2.next = 12;\n                break;\n              }\n              _context2.next = 5;\n              return blockstore.get(leaf.cid);\n            case 5:\n              _buffer = _context2.sent;\n              leaf.unixfs = new UnixFS({\n                type: 'file',\n                mtime: file.mtime,\n                mode: file.mode,\n                data: _buffer\n              });\n              _buffer = encode(prepare({\n                Data: leaf.unixfs.marshal()\n              }));\n              _context2.next = 10;\n              return persist(_buffer, blockstore, _objectSpread(_objectSpread({}, options), {}, {\n                codec: dagPb,\n                hasher: options.hasher,\n                cidVersion: options.cidVersion\n              }));\n            case 10:\n              leaf.cid = _context2.sent;\n              leaf.size = _buffer.length;\n            case 12:\n              return _context2.abrupt(\"return\", {\n                cid: leaf.cid,\n                path: file.path,\n                unixfs: leaf.unixfs,\n                size: leaf.size\n              });\n            case 13:\n              f = new UnixFS({\n                type: 'file',\n                mtime: file.mtime,\n                mode: file.mode\n              });\n              links = leaves.filter(function (leaf) {\n                if (leaf.cid.code === rawCodec.code && leaf.size) {\n                  return true;\n                }\n                if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {\n                  return true;\n                }\n                return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length);\n              }).map(function (leaf) {\n                if (leaf.cid.code === rawCodec.code) {\n                  f.addBlockSize(leaf.size);\n                  return {\n                    Name: '',\n                    Tsize: leaf.size,\n                    Hash: leaf.cid\n                  };\n                }\n                if (!leaf.unixfs || !leaf.unixfs.data) {\n                  f.addBlockSize(leaf.unixfs && leaf.unixfs.fileSize() || 0);\n                } else {\n                  f.addBlockSize(leaf.unixfs.data.length);\n                }\n                return {\n                  Name: '',\n                  Tsize: leaf.size,\n                  Hash: leaf.cid\n                };\n              });\n              node = {\n                Data: f.marshal(),\n                Links: links\n              };\n              buffer = encode(prepare(node));\n              _context2.next = 19;\n              return persist(buffer, blockstore, options);\n            case 19:\n              cid = _context2.sent;\n              return _context2.abrupt(\"return\", {\n                cid: cid,\n                path: file.path,\n                unixfs: f,\n                size: buffer.length + node.Links.reduce(function (acc, curr) {\n                  return acc + curr.Tsize;\n                }, 0)\n              });\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _reducer.apply(this, arguments);\n  }\n  return reducer;\n};\nfunction fileBuilder(file, block, options) {\n  var dagBuilder = dagBuilders[options.strategy];\n  if (!dagBuilder) {\n    throw errCode(new Error(\"Unknown importer build strategy name: \".concat(options.strategy)), 'ERR_BAD_STRATEGY');\n  }\n  return dagBuilder(buildFileBatch(file, block, options), reduce(file, block, options), options);\n}\nexport default fileBuilder;","map":{"version":3,"names":["errCode","UnixFS","persist","encode","prepare","parallelBatch","rawCodec","dagPb","dagFlat","dagBalanced","dagTrickle","bufferImporterFn","dagBuilders","flat","balanced","trickle","buildFileBatch","file","blockstore","options","count","bufferImporter","blockWriteConcurrency","entry","previous","single","reduce","reducer","leaves","length","reduceSingleLeafToSelf","leaf","mtime","undefined","mode","get","cid","buffer","unixfs","type","data","Data","marshal","codec","hasher","cidVersion","size","path","f","links","filter","code","fileSize","Boolean","map","addBlockSize","Name","Tsize","Hash","node","Links","acc","curr","fileBuilder","block","dagBuilder","strategy","Error"],"sources":["/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/ipfs-unixfs-importer/esm/src/dag-builder/file/index.js"],"sourcesContent":["import errCode from 'err-code';\nimport { UnixFS } from 'ipfs-unixfs';\nimport persist from '../../utils/persist.js';\nimport {\n  encode,\n  prepare\n} from '@ipld/dag-pb';\nimport parallelBatch from 'it-parallel-batch';\nimport * as rawCodec from 'multiformats/codecs/raw';\nimport * as dagPb from '@ipld/dag-pb';\nimport dagFlat from './flat.js';\nimport dagBalanced from './balanced.js';\nimport dagTrickle from './trickle.js';\nimport bufferImporterFn from './buffer-importer.js';\nconst dagBuilders = {\n  flat: dagFlat,\n  balanced: dagBalanced,\n  trickle: dagTrickle\n};\nasync function* buildFileBatch(file, blockstore, options) {\n  let count = -1;\n  let previous;\n  let bufferImporter;\n  if (typeof options.bufferImporter === 'function') {\n    bufferImporter = options.bufferImporter;\n  } else {\n    bufferImporter = bufferImporterFn;\n  }\n  for await (const entry of parallelBatch(bufferImporter(file, blockstore, options), options.blockWriteConcurrency)) {\n    count++;\n    if (count === 0) {\n      previous = entry;\n      continue;\n    } else if (count === 1 && previous) {\n      yield previous;\n      previous = null;\n    }\n    yield entry;\n  }\n  if (previous) {\n    previous.single = true;\n    yield previous;\n  }\n}\nconst reduce = (file, blockstore, options) => {\n  async function reducer(leaves) {\n    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {\n      const leaf = leaves[0];\n      if (file.mtime !== undefined || file.mode !== undefined) {\n        let buffer = await blockstore.get(leaf.cid);\n        leaf.unixfs = new UnixFS({\n          type: 'file',\n          mtime: file.mtime,\n          mode: file.mode,\n          data: buffer\n        });\n        buffer = encode(prepare({ Data: leaf.unixfs.marshal() }));\n        leaf.cid = await persist(buffer, blockstore, {\n          ...options,\n          codec: dagPb,\n          hasher: options.hasher,\n          cidVersion: options.cidVersion\n        });\n        leaf.size = buffer.length;\n      }\n      return {\n        cid: leaf.cid,\n        path: file.path,\n        unixfs: leaf.unixfs,\n        size: leaf.size\n      };\n    }\n    const f = new UnixFS({\n      type: 'file',\n      mtime: file.mtime,\n      mode: file.mode\n    });\n    const links = leaves.filter(leaf => {\n      if (leaf.cid.code === rawCodec.code && leaf.size) {\n        return true;\n      }\n      if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {\n        return true;\n      }\n      return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length);\n    }).map(leaf => {\n      if (leaf.cid.code === rawCodec.code) {\n        f.addBlockSize(leaf.size);\n        return {\n          Name: '',\n          Tsize: leaf.size,\n          Hash: leaf.cid\n        };\n      }\n      if (!leaf.unixfs || !leaf.unixfs.data) {\n        f.addBlockSize(leaf.unixfs && leaf.unixfs.fileSize() || 0);\n      } else {\n        f.addBlockSize(leaf.unixfs.data.length);\n      }\n      return {\n        Name: '',\n        Tsize: leaf.size,\n        Hash: leaf.cid\n      };\n    });\n    const node = {\n      Data: f.marshal(),\n      Links: links\n    };\n    const buffer = encode(prepare(node));\n    const cid = await persist(buffer, blockstore, options);\n    return {\n      cid,\n      path: file.path,\n      unixfs: f,\n      size: buffer.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0)\n    };\n  }\n  return reducer;\n};\nfunction fileBuilder(file, block, options) {\n  const dagBuilder = dagBuilders[options.strategy];\n  if (!dagBuilder) {\n    throw errCode(new Error(`Unknown importer build strategy name: ${ options.strategy }`), 'ERR_BAD_STRATEGY');\n  }\n  return dagBuilder(buildFileBatch(file, block, options), reduce(file, block, options), options);\n}\nexport default fileBuilder;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}