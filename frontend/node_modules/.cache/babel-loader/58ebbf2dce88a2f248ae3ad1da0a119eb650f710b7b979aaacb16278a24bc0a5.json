{"ast":null,"code":"import _regeneratorRuntime from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _awaitAsyncGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { UnixFS } from 'ipfs-unixfs';\nimport persist from '../../utils/persist.js';\nimport * as dagPb from '@ipld/dag-pb';\nimport * as raw from 'multiformats/codecs/raw';\nfunction bufferImporter(_x, _x2, _x3) {\n  return _bufferImporter.apply(this, arguments);\n}\nfunction _bufferImporter() {\n  _bufferImporter = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(file, block, options) {\n    var _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _loop, _iterator, _step;\n    return _regeneratorRuntime().wrap(function _callee2$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context3.prev = 2;\n            _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {\n              var buffer;\n              return _regeneratorRuntime().wrap(function _loop$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      buffer = _step.value;\n                      _context2.next = 3;\n                      return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                        var unixfs, opts;\n                        return _regeneratorRuntime().wrap(function _callee$(_context) {\n                          while (1) {\n                            switch (_context.prev = _context.next) {\n                              case 0:\n                                options.progress(buffer.length, file.path);\n                                opts = {\n                                  codec: dagPb,\n                                  cidVersion: options.cidVersion,\n                                  hasher: options.hasher,\n                                  onlyHash: options.onlyHash\n                                };\n                                if (options.rawLeaves) {\n                                  opts.codec = raw;\n                                  opts.cidVersion = 1;\n                                } else {\n                                  unixfs = new UnixFS({\n                                    type: options.leafType,\n                                    data: buffer\n                                  });\n                                  buffer = dagPb.encode({\n                                    Data: unixfs.marshal(),\n                                    Links: []\n                                  });\n                                }\n                                _context.next = 5;\n                                return persist(buffer, block, opts);\n                              case 5:\n                                _context.t0 = _context.sent;\n                                _context.t1 = unixfs;\n                                _context.t2 = buffer.length;\n                                return _context.abrupt(\"return\", {\n                                  cid: _context.t0,\n                                  unixfs: _context.t1,\n                                  size: _context.t2\n                                });\n                              case 9:\n                              case \"end\":\n                                return _context.stop();\n                            }\n                          }\n                        }, _callee);\n                      }));\n                    case 3:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _loop);\n            });\n            _iterator = _asyncIterator(file.content);\n          case 5:\n            _context3.next = 7;\n            return _awaitAsyncGenerator(_iterator.next());\n          case 7:\n            if (!(_iteratorAbruptCompletion = !(_step = _context3.sent).done)) {\n              _context3.next = 12;\n              break;\n            }\n            return _context3.delegateYield(_loop(), \"t0\", 9);\n          case 9:\n            _iteratorAbruptCompletion = false;\n            _context3.next = 5;\n            break;\n          case 12:\n            _context3.next = 18;\n            break;\n          case 14:\n            _context3.prev = 14;\n            _context3.t1 = _context3[\"catch\"](2);\n            _didIteratorError = true;\n            _iteratorError = _context3.t1;\n          case 18:\n            _context3.prev = 18;\n            _context3.prev = 19;\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context3.next = 23;\n              break;\n            }\n            _context3.next = 23;\n            return _awaitAsyncGenerator(_iterator.return());\n          case 23:\n            _context3.prev = 23;\n            if (!_didIteratorError) {\n              _context3.next = 26;\n              break;\n            }\n            throw _iteratorError;\n          case 26:\n            return _context3.finish(23);\n          case 27:\n            return _context3.finish(18);\n          case 28:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee2, null, [[2, 14, 18, 28], [19,, 23, 27]]);\n  }));\n  return _bufferImporter.apply(this, arguments);\n}\nexport default bufferImporter;","map":{"version":3,"names":["UnixFS","persist","dagPb","raw","bufferImporter","file","block","options","buffer","progress","length","path","opts","codec","cidVersion","hasher","onlyHash","rawLeaves","unixfs","type","leafType","data","encode","Data","marshal","Links","cid","size","content"],"sources":["/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/ipfs-unixfs-importer/esm/src/dag-builder/file/buffer-importer.js"],"sourcesContent":["import { UnixFS } from 'ipfs-unixfs';\nimport persist from '../../utils/persist.js';\nimport * as dagPb from '@ipld/dag-pb';\nimport * as raw from 'multiformats/codecs/raw';\nasync function* bufferImporter(file, block, options) {\n  for await (let buffer of file.content) {\n    yield async () => {\n      options.progress(buffer.length, file.path);\n      let unixfs;\n      const opts = {\n        codec: dagPb,\n        cidVersion: options.cidVersion,\n        hasher: options.hasher,\n        onlyHash: options.onlyHash\n      };\n      if (options.rawLeaves) {\n        opts.codec = raw;\n        opts.cidVersion = 1;\n      } else {\n        unixfs = new UnixFS({\n          type: options.leafType,\n          data: buffer\n        });\n        buffer = dagPb.encode({\n          Data: unixfs.marshal(),\n          Links: []\n        });\n      }\n      return {\n        cid: await persist(buffer, block, opts),\n        unixfs,\n        size: buffer.length\n      };\n    };\n  }\n}\nexport default bufferImporter;"],"mappings":";;;;;AAAA,SAASA,MAAM,QAAQ,aAAa;AACpC,OAAOC,OAAO,MAAM,wBAAwB;AAC5C,OAAO,KAAKC,KAAK,MAAM,cAAc;AACrC,OAAO,KAAKC,GAAG,MAAM,yBAAyB;AAAC,SAC/BC,cAAc;EAAA;AAAA;AAAA;EAAA,+EAA9B,kBAA+BC,IAAI,EAAEC,KAAK,EAAEC,OAAO;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA;YAAA;YAAA;cAAA;cAAA;gBAAA;kBAAA;oBAAA;sBAClCC,MAAM;sBAAA;sBACnB,+EAAM;wBAAA;wBAAA;0BAAA;4BAAA;8BAAA;gCACJD,OAAO,CAACE,QAAQ,CAACD,MAAM,CAACE,MAAM,EAAEL,IAAI,CAACM,IAAI,CAAC;gCAEpCC,IAAI,GAAG;kCACXC,KAAK,EAAEX,KAAK;kCACZY,UAAU,EAAEP,OAAO,CAACO,UAAU;kCAC9BC,MAAM,EAAER,OAAO,CAACQ,MAAM;kCACtBC,QAAQ,EAAET,OAAO,CAACS;gCACpB,CAAC;gCACD,IAAIT,OAAO,CAACU,SAAS,EAAE;kCACrBL,IAAI,CAACC,KAAK,GAAGV,GAAG;kCAChBS,IAAI,CAACE,UAAU,GAAG,CAAC;gCACrB,CAAC,MAAM;kCACLI,MAAM,GAAG,IAAIlB,MAAM,CAAC;oCAClBmB,IAAI,EAAEZ,OAAO,CAACa,QAAQ;oCACtBC,IAAI,EAAEb;kCACR,CAAC,CAAC;kCACFA,MAAM,GAAGN,KAAK,CAACoB,MAAM,CAAC;oCACpBC,IAAI,EAAEL,MAAM,CAACM,OAAO,EAAE;oCACtBC,KAAK,EAAE;kCACT,CAAC,CAAC;gCACJ;gCAAC;gCAAA,OAEYxB,OAAO,CAACO,MAAM,EAAEF,KAAK,EAAEM,IAAI,CAAC;8BAAA;gCAAA;gCAAA,cACvCM,MAAM;gCAAA,cACAV,MAAM,CAACE,MAAM;gCAAA;kCAFnBgB,GAAG;kCACHR,MAAM;kCACNS,IAAI;gCAAA;8BAAA;8BAAA;gCAAA;4BAAA;0BAAA;wBAAA;sBAAA,CAEP;oBAAA;oBAAA;sBAAA;kBAAA;gBAAA;cAAA;YAAA;YAAA,2BA5BsBtB,IAAI,CAACuB,OAAO;UAAA;YAAA;YAAA;UAAA;YAAA;cAAA;cAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;cAAA;cAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;cAAA;cAAA;YAAA;YAAA;UAAA;YAAA;UAAA;YAAA;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CA8BtC;EAAA;AAAA;AACD,eAAexB,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}