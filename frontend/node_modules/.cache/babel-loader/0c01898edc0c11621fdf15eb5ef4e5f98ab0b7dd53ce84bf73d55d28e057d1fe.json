{"ast":null,"code":"import _slicedToArray from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _toConsumableArray from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _awaitAsyncGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport { CarReader, CarWriter } from '@ipld/car';\nimport { Block } from 'multiformats/block';\nimport * as raw from 'multiformats/codecs/raw';\nimport * as cbor from '@ipld/dag-cbor';\nimport * as pb from '@ipld/dag-pb';\nexport var TreewalkCarSplitter = /*#__PURE__*/function () {\n  function TreewalkCarSplitter(reader, targetSize) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _classCallCheck(this, TreewalkCarSplitter);\n    if (typeof targetSize !== 'number' || targetSize <= 0) {\n      throw new Error('invalid target chunk size');\n    }\n    this._reader = reader;\n    this._targetSize = targetSize;\n    this._decoders = [pb, raw, cbor].concat(_toConsumableArray(options.decoders || []));\n  }\n  _createClass(TreewalkCarSplitter, [{\n    key: \"cars\",\n    value: function cars() {\n      var _this = this;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var roots, channel, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, val;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _awaitAsyncGenerator(_this._reader.getRoots());\n              case 2:\n                roots = _context.sent;\n                if (!(roots.length !== 1)) {\n                  _context.next = 5;\n                  break;\n                }\n                throw new Error(\"unexpected number of roots: \".concat(roots.length));\n              case 5:\n                _iteratorAbruptCompletion = false;\n                _didIteratorError = false;\n                _context.prev = 7;\n                _iterator = _asyncIterator(_this._cars(roots[0]));\n              case 9:\n                _context.next = 11;\n                return _awaitAsyncGenerator(_iterator.next());\n              case 11:\n                if (!(_iteratorAbruptCompletion = !(_step = _context.sent).done)) {\n                  _context.next = 20;\n                  break;\n                }\n                val = _step.value;\n                channel = val.channel;\n                if (!val.out) {\n                  _context.next = 17;\n                  break;\n                }\n                _context.next = 17;\n                return val.out;\n              case 17:\n                _iteratorAbruptCompletion = false;\n                _context.next = 9;\n                break;\n              case 20:\n                _context.next = 26;\n                break;\n              case 22:\n                _context.prev = 22;\n                _context.t0 = _context[\"catch\"](7);\n                _didIteratorError = true;\n                _iteratorError = _context.t0;\n              case 26:\n                _context.prev = 26;\n                _context.prev = 27;\n                if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                  _context.next = 31;\n                  break;\n                }\n                _context.next = 31;\n                return _awaitAsyncGenerator(_iterator.return());\n              case 31:\n                _context.prev = 31;\n                if (!_didIteratorError) {\n                  _context.next = 34;\n                  break;\n                }\n                throw _iteratorError;\n              case 34:\n                return _context.finish(31);\n              case 35:\n                return _context.finish(26);\n              case 36:\n                if (channel) {\n                  _context.next = 38;\n                  break;\n                }\n                throw new Error('missing CAR writer channel');\n              case 38:\n                channel.writer.close();\n                _context.next = 41;\n                return channel.out;\n              case 41:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[7, 22, 26, 36], [27,, 31, 35]]);\n      }))();\n    }\n  }, {\n    key: \"_get\",\n    value: function () {\n      var _get2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(cid) {\n        var rawBlock, bytes, decoder;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._reader.get(cid);\n              case 2:\n                rawBlock = _context2.sent;\n                if (rawBlock) {\n                  _context2.next = 5;\n                  break;\n                }\n                throw new Error(\"missing block for \".concat(cid));\n              case 5:\n                bytes = rawBlock.bytes;\n                decoder = this._decoders.find(function (d) {\n                  return d.code === cid.code;\n                });\n                if (decoder) {\n                  _context2.next = 9;\n                  break;\n                }\n                throw new Error(\"missing decoder for \".concat(cid.code));\n              case 9:\n                return _context2.abrupt(\"return\", new Block({\n                  cid: cid,\n                  bytes: bytes,\n                  value: decoder.decode(bytes)\n                }));\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function _get(_x) {\n        return _get2.apply(this, arguments);\n      }\n      return _get;\n    }()\n  }, {\n    key: \"_cars\",\n    value: function _cars(cid) {\n      var _this2 = this;\n      var parents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var channel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n      return _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var block, _channel, out, _iterator3, _step3, _step3$value, _cid, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, val;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return _awaitAsyncGenerator(_this2._get(cid));\n              case 2:\n                block = _context3.sent;\n                channel = channel || Object.assign(CarWriter.create(cid), {\n                  size: 0\n                });\n                if (!(channel.size > 0 && channel.size + block.bytes.byteLength >= _this2._targetSize)) {\n                  _context3.next = 10;\n                  break;\n                }\n                channel.writer.close();\n                _channel = channel, out = _channel.out;\n                channel = newCar(parents);\n                _context3.next = 10;\n                return {\n                  channel: channel,\n                  out: out\n                };\n              case 10:\n                parents = parents.concat(block);\n                channel.size += block.bytes.byteLength;\n                channel.writer.put(block);\n                _iterator3 = _createForOfIteratorHelper(block.links());\n                _context3.prev = 14;\n                _iterator3.s();\n              case 16:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context3.next = 50;\n                  break;\n                }\n                _step3$value = _slicedToArray(_step3.value, 2), _cid = _step3$value[1];\n                _iteratorAbruptCompletion2 = false;\n                _didIteratorError2 = false;\n                _context3.prev = 20;\n                _iterator2 = _asyncIterator(_this2._cars(_cid, parents, channel));\n              case 22:\n                _context3.next = 24;\n                return _awaitAsyncGenerator(_iterator2.next());\n              case 24:\n                if (!(_iteratorAbruptCompletion2 = !(_step2 = _context3.sent).done)) {\n                  _context3.next = 32;\n                  break;\n                }\n                val = _step2.value;\n                channel = val.channel;\n                _context3.next = 29;\n                return val;\n              case 29:\n                _iteratorAbruptCompletion2 = false;\n                _context3.next = 22;\n                break;\n              case 32:\n                _context3.next = 38;\n                break;\n              case 34:\n                _context3.prev = 34;\n                _context3.t0 = _context3[\"catch\"](20);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context3.t0;\n              case 38:\n                _context3.prev = 38;\n                _context3.prev = 39;\n                if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                  _context3.next = 43;\n                  break;\n                }\n                _context3.next = 43;\n                return _awaitAsyncGenerator(_iterator2.return());\n              case 43:\n                _context3.prev = 43;\n                if (!_didIteratorError2) {\n                  _context3.next = 46;\n                  break;\n                }\n                throw _iteratorError2;\n              case 46:\n                return _context3.finish(43);\n              case 47:\n                return _context3.finish(38);\n              case 48:\n                _context3.next = 16;\n                break;\n              case 50:\n                _context3.next = 55;\n                break;\n              case 52:\n                _context3.prev = 52;\n                _context3.t1 = _context3[\"catch\"](14);\n                _iterator3.e(_context3.t1);\n              case 55:\n                _context3.prev = 55;\n                _iterator3.f();\n                return _context3.finish(55);\n              case 58:\n                if (channel) {\n                  _context3.next = 60;\n                  break;\n                }\n                throw new Error('missing CAR writer channel');\n              case 60:\n                _context3.next = 62;\n                return {\n                  channel: channel\n                };\n              case 62:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[14, 52, 55, 58], [20, 34, 38, 48], [39,, 43, 47]]);\n      }))();\n    }\n  }], [{\n    key: \"fromIterable\",\n    value: function () {\n      var _fromIterable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(iterable, targetSize, options) {\n        var reader;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return CarReader.fromIterable(iterable);\n              case 2:\n                reader = _context4.sent;\n                return _context4.abrupt(\"return\", new TreewalkCarSplitter(reader, targetSize, options));\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n      function fromIterable(_x2, _x3, _x4) {\n        return _fromIterable.apply(this, arguments);\n      }\n      return fromIterable;\n    }()\n  }, {\n    key: \"fromBlob\",\n    value: function () {\n      var _fromBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(blob, targetSize, options) {\n        var buffer, reader;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return blob.arrayBuffer();\n              case 2:\n                buffer = _context5.sent;\n                _context5.next = 5;\n                return CarReader.fromBytes(new Uint8Array(buffer));\n              case 5:\n                reader = _context5.sent;\n                return _context5.abrupt(\"return\", new TreewalkCarSplitter(reader, targetSize, options));\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n      function fromBlob(_x5, _x6, _x7) {\n        return _fromBlob.apply(this, arguments);\n      }\n      return fromBlob;\n    }()\n  }]);\n  return TreewalkCarSplitter;\n}();\nfunction newCar(parents) {\n  var ch = Object.assign(CarWriter.create(parents[0].cid), {\n    size: parents.reduce(function (size, b) {\n      return size + b.bytes.byteLength;\n    }, 0)\n  });\n  var _iterator4 = _createForOfIteratorHelper(parents),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var b = _step4.value;\n      ch.writer.put(b);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return ch;\n}","map":{"version":3,"names":["CarReader","CarWriter","Block","raw","cbor","pb","TreewalkCarSplitter","reader","targetSize","options","Error","_reader","_targetSize","_decoders","decoders","getRoots","roots","length","_cars","val","channel","out","writer","close","cid","get","rawBlock","bytes","decoder","find","d","code","value","decode","parents","undefined","_get","block","Object","assign","create","size","byteLength","newCar","concat","put","links","iterable","fromIterable","blob","arrayBuffer","buffer","fromBytes","Uint8Array","ch","reduce","b"],"sources":["/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/carbites/esm/lib/treewalk/splitter.js"],"sourcesContent":["import {\n  CarReader,\n  CarWriter\n} from '@ipld/car';\nimport { Block } from 'multiformats/block';\nimport * as raw from 'multiformats/codecs/raw';\nimport * as cbor from '@ipld/dag-cbor';\nimport * as pb from '@ipld/dag-pb';\nexport class TreewalkCarSplitter {\n  constructor(reader, targetSize, options = {}) {\n    if (typeof targetSize !== 'number' || targetSize <= 0) {\n      throw new Error('invalid target chunk size');\n    }\n    this._reader = reader;\n    this._targetSize = targetSize;\n    this._decoders = [\n      pb,\n      raw,\n      cbor,\n      ...options.decoders || []\n    ];\n  }\n  async *cars() {\n    const roots = await this._reader.getRoots();\n    if (roots.length !== 1)\n      throw new Error(`unexpected number of roots: ${ roots.length }`);\n    let channel;\n    for await (const val of this._cars(roots[0])) {\n      channel = val.channel;\n      if (val.out)\n        yield val.out;\n    }\n    if (!channel) {\n      throw new Error('missing CAR writer channel');\n    }\n    channel.writer.close();\n    yield channel.out;\n  }\n  async _get(cid) {\n    const rawBlock = await this._reader.get(cid);\n    if (!rawBlock)\n      throw new Error(`missing block for ${ cid }`);\n    const {bytes} = rawBlock;\n    const decoder = this._decoders.find(d => d.code === cid.code);\n    if (!decoder)\n      throw new Error(`missing decoder for ${ cid.code }`);\n    return new Block({\n      cid,\n      bytes,\n      value: decoder.decode(bytes)\n    });\n  }\n  async *_cars(cid, parents = [], channel = undefined) {\n    const block = await this._get(cid);\n    channel = channel || Object.assign(CarWriter.create(cid), { size: 0 });\n    if (channel.size > 0 && channel.size + block.bytes.byteLength >= this._targetSize) {\n      channel.writer.close();\n      const {out} = channel;\n      channel = newCar(parents);\n      yield {\n        channel,\n        out\n      };\n    }\n    parents = parents.concat(block);\n    channel.size += block.bytes.byteLength;\n    channel.writer.put(block);\n    for (const [, cid] of block.links()) {\n      for await (const val of this._cars(cid, parents, channel)) {\n        channel = val.channel;\n        yield val;\n      }\n    }\n    if (!channel) {\n      throw new Error('missing CAR writer channel');\n    }\n    yield { channel };\n  }\n  static async fromIterable(iterable, targetSize, options) {\n    const reader = await CarReader.fromIterable(iterable);\n    return new TreewalkCarSplitter(reader, targetSize, options);\n  }\n  static async fromBlob(blob, targetSize, options) {\n    const buffer = await blob.arrayBuffer();\n    const reader = await CarReader.fromBytes(new Uint8Array(buffer));\n    return new TreewalkCarSplitter(reader, targetSize, options);\n  }\n}\nfunction newCar(parents) {\n  const ch = Object.assign(CarWriter.create(parents[0].cid), { size: parents.reduce((size, b) => size + b.bytes.byteLength, 0) });\n  for (const b of parents) {\n    ch.writer.put(b);\n  }\n  return ch;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}