{"ast":null,"code":"import _regeneratorRuntime from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { CID } from 'multiformats/cid';\nimport * as dagPb from '@ipld/dag-pb';\nimport { sha256 } from 'multiformats/hashes/sha2';\nvar persist = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(buffer, blockstore, options) {\n    var multihash, cid;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!options.codec) {\n              options.codec = dagPb;\n            }\n            if (!options.hasher) {\n              options.hasher = sha256;\n            }\n            if (options.cidVersion === undefined) {\n              options.cidVersion = 1;\n            }\n            if (options.codec === dagPb && options.hasher !== sha256) {\n              options.cidVersion = 1;\n            }\n            _context.next = 6;\n            return options.hasher.digest(buffer);\n          case 6:\n            multihash = _context.sent;\n            cid = CID.create(options.cidVersion, options.codec.code, multihash);\n            if (options.onlyHash) {\n              _context.next = 11;\n              break;\n            }\n            _context.next = 11;\n            return blockstore.put(cid, buffer, {\n              signal: options.signal\n            });\n          case 11:\n            return _context.abrupt(\"return\", cid);\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return function persist(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport default persist;","map":{"version":3,"names":["CID","dagPb","sha256","persist","buffer","blockstore","options","codec","hasher","cidVersion","undefined","digest","multihash","cid","create","code","onlyHash","put","signal"],"sources":["/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/ipfs-unixfs-importer/esm/src/utils/persist.js"],"sourcesContent":["import { CID } from 'multiformats/cid';\nimport * as dagPb from '@ipld/dag-pb';\nimport { sha256 } from 'multiformats/hashes/sha2';\nconst persist = async (buffer, blockstore, options) => {\n  if (!options.codec) {\n    options.codec = dagPb;\n  }\n  if (!options.hasher) {\n    options.hasher = sha256;\n  }\n  if (options.cidVersion === undefined) {\n    options.cidVersion = 1;\n  }\n  if (options.codec === dagPb && options.hasher !== sha256) {\n    options.cidVersion = 1;\n  }\n  const multihash = await options.hasher.digest(buffer);\n  const cid = CID.create(options.cidVersion, options.codec.code, multihash);\n  if (!options.onlyHash) {\n    await blockstore.put(cid, buffer, { signal: options.signal });\n  }\n  return cid;\n};\nexport default persist;"],"mappings":";;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,OAAO,KAAKC,KAAK,MAAM,cAAc;AACrC,SAASC,MAAM,QAAQ,0BAA0B;AACjD,IAAMC,OAAO;EAAA,sEAAG,iBAAOC,MAAM,EAAEC,UAAU,EAAEC,OAAO;IAAA;IAAA;MAAA;QAAA;UAAA;YAChD,IAAI,CAACA,OAAO,CAACC,KAAK,EAAE;cAClBD,OAAO,CAACC,KAAK,GAAGN,KAAK;YACvB;YACA,IAAI,CAACK,OAAO,CAACE,MAAM,EAAE;cACnBF,OAAO,CAACE,MAAM,GAAGN,MAAM;YACzB;YACA,IAAII,OAAO,CAACG,UAAU,KAAKC,SAAS,EAAE;cACpCJ,OAAO,CAACG,UAAU,GAAG,CAAC;YACxB;YACA,IAAIH,OAAO,CAACC,KAAK,KAAKN,KAAK,IAAIK,OAAO,CAACE,MAAM,KAAKN,MAAM,EAAE;cACxDI,OAAO,CAACG,UAAU,GAAG,CAAC;YACxB;YAAC;YAAA,OACuBH,OAAO,CAACE,MAAM,CAACG,MAAM,CAACP,MAAM,CAAC;UAAA;YAA/CQ,SAAS;YACTC,GAAG,GAAGb,GAAG,CAACc,MAAM,CAACR,OAAO,CAACG,UAAU,EAAEH,OAAO,CAACC,KAAK,CAACQ,IAAI,EAAEH,SAAS,CAAC;YAAA,IACpEN,OAAO,CAACU,QAAQ;cAAA;cAAA;YAAA;YAAA;YAAA,OACbX,UAAU,CAACY,GAAG,CAACJ,GAAG,EAAET,MAAM,EAAE;cAAEc,MAAM,EAAEZ,OAAO,CAACY;YAAO,CAAC,CAAC;UAAA;YAAA,iCAExDL,GAAG;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACX;EAAA,gBAnBKV,OAAO;IAAA;EAAA;AAAA,GAmBZ;AACD,eAAeA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}