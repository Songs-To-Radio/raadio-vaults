{"ast":null,"code":"import { NFTStorage, File, Blob } from \"nft.storage\";\nimport axios from \"axios\";\nimport { v4 } from \"uuid\";\nasync function uploadToServer(ipfsUrl, wallet_address) {\n  try {\n    let res = await axios.post(\"http://localhost:2000/create-vault\", {\n      controller: wallet_address,\n      ipfsUrl\n    }, {\n      headers: {\n        \"content-type\": \"application/json\"\n      }\n    });\n    return res.status;\n  } catch (error) {\n    throw error;\n  }\n}\nconst API_KEY = process.env.NFT_STORAGE_API_KEY || \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweGE5M0I4NGFlNThkMDNkOTAwQjc5MzExOGEzNDQ2ZEZCZUU5NTVERmEiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY1MTUxMDYyMDg2MCwibmFtZSI6IlNUUiAtIE1hcmtldHBsYWNlICJ9.D71kmGtnh1wOLBF2BfVqMtuCPk79wvEiFxuhpuKgqwA\";\nconst client = new NFTStorage({\n  token: API_KEY\n});\nasync function createMetadata(image) {\n  try {\n    let url = URL.createObjectURL(image);\n    let res = await fetch(url);\n    let blob = await res.blob();\n    const content = new File([image], v4() + \".\" + blob.type.split(\"/\")[1]);\n    const cid = await client.storeBlob(content);\n    console.log(\"this is the image cid \", \"https://nftstorage.link/ipfs/\" + cid);\n    return cid;\n  } catch (error) {\n    throw error;\n  }\n}\nexport async function uploadToIpfsAndServer(image, name, description, wallet_address, web2) {\n  try {\n    let url = URL.createObjectURL(image);\n    let res = await fetch(url);\n    let blob = await res.blob();\n    const content = new File([image], v4() + \".\" + blob.type.split(\"/\")[1]);\n    const baseURI = await client.store({\n      name,\n      video: cid,\n      image: cid,\n      description,\n      description,\n      collection: name,\n      web2_metadata: web2\n    });\n    console.log(\"https://nftstorage.link/ipfs/\" + baseURI);\n    return await uploadToServer(baseURI, wallet_address);\n  } catch (error) {\n    throw error;\n  }\n}","map":{"version":3,"names":["NFTStorage","File","Blob","axios","v4","uploadToServer","ipfsUrl","wallet_address","res","post","controller","headers","status","error","API_KEY","process","env","NFT_STORAGE_API_KEY","client","token","createMetadata","image","url","URL","createObjectURL","fetch","blob","content","type","split","cid","storeBlob","console","log","uploadToIpfsAndServer","name","description","web2","baseURI","store","video","collection","web2_metadata"],"sources":["/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/src/api/api.js"],"sourcesContent":["import { NFTStorage, File, Blob } from \"nft.storage\"\nimport axios from \"axios\";\nimport { v4 } from \"uuid\";\n\nasync function uploadToServer(ipfsUrl, wallet_address) {\n  try {\n    let res = await axios.post(\n      \"http://localhost:2000/create-vault\",\n      {\n        controller: wallet_address,\n        ipfsUrl,\n      },\n      {\n        headers: {\n          \"content-type\": \"application/json\",\n        },\n      }\n    );\n\n    return res.status;\n  } catch (error) {\n    throw(error);\n  }\n}\n\n\n\nconst API_KEY = process.env.NFT_STORAGE_API_KEY || \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweGE5M0I4NGFlNThkMDNkOTAwQjc5MzExOGEzNDQ2ZEZCZUU5NTVERmEiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY1MTUxMDYyMDg2MCwibmFtZSI6IlNUUiAtIE1hcmtldHBsYWNlICJ9.D71kmGtnh1wOLBF2BfVqMtuCPk79wvEiFxuhpuKgqwA\"\nconst client = new NFTStorage({ token: API_KEY });\n\nasync function createMetadata(image) {\n  try {\n    let url = URL.createObjectURL(image);\n    let res = await fetch(url);\n    let blob = await res.blob();\n    const content = new File([image], v4() + \".\" + blob.type.split(\"/\")[1])\n    const cid = await client.storeBlob(content)\n    console.log(\"this is the image cid \", \"https://nftstorage.link/ipfs/\"+cid)\n    return cid\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function uploadToIpfsAndServer(image, name, description, wallet_address, web2) {\n  try {\n    let url = URL.createObjectURL(image);\n    let res = await fetch(url);\n    let blob = await res.blob();\n    const content = new File([image], v4() + \".\" + blob.type.split(\"/\")[1])\n    const baseURI = await client.store({\n        name,\n        video: cid,\n        image: cid,\n        description, description,\n        collection: name,\n        web2_metadata: web2\n    });\n    console.log(\"https://nftstorage.link/ipfs/\"+baseURI);\n    return await uploadToServer(baseURI, wallet_address);\n  } catch (error) {\n    throw(error)\n  }\n}\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,IAAI,EAAEC,IAAI,QAAQ,aAAa;AACpD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,EAAE,QAAQ,MAAM;AAEzB,eAAeC,cAAc,CAACC,OAAO,EAAEC,cAAc,EAAE;EACrD,IAAI;IACF,IAAIC,GAAG,GAAG,MAAML,KAAK,CAACM,IAAI,CACxB,oCAAoC,EACpC;MACEC,UAAU,EAAEH,cAAc;MAC1BD;IACF,CAAC,EACD;MACEK,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC,CACF;IAED,OAAOH,GAAG,CAACI,MAAM;EACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF;AAIA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,mBAAmB,IAAI,+PAA+P;AAClT,MAAMC,MAAM,GAAG,IAAIlB,UAAU,CAAC;EAAEmB,KAAK,EAAEL;AAAQ,CAAC,CAAC;AAEjD,eAAeM,cAAc,CAACC,KAAK,EAAE;EACnC,IAAI;IACF,IAAIC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACH,KAAK,CAAC;IACpC,IAAIb,GAAG,GAAG,MAAMiB,KAAK,CAACH,GAAG,CAAC;IAC1B,IAAII,IAAI,GAAG,MAAMlB,GAAG,CAACkB,IAAI,EAAE;IAC3B,MAAMC,OAAO,GAAG,IAAI1B,IAAI,CAAC,CAACoB,KAAK,CAAC,EAAEjB,EAAE,EAAE,GAAG,GAAG,GAAGsB,IAAI,CAACE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACvE,MAAMC,GAAG,GAAG,MAAMZ,MAAM,CAACa,SAAS,CAACJ,OAAO,CAAC;IAC3CK,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE,+BAA+B,GAACH,GAAG,CAAC;IAC1E,OAAOA,GAAG;EACZ,CAAC,CAAC,OAAOjB,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeqB,qBAAqB,CAACb,KAAK,EAAEc,IAAI,EAAEC,WAAW,EAAE7B,cAAc,EAAE8B,IAAI,EAAE;EAC1F,IAAI;IACF,IAAIf,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACH,KAAK,CAAC;IACpC,IAAIb,GAAG,GAAG,MAAMiB,KAAK,CAACH,GAAG,CAAC;IAC1B,IAAII,IAAI,GAAG,MAAMlB,GAAG,CAACkB,IAAI,EAAE;IAC3B,MAAMC,OAAO,GAAG,IAAI1B,IAAI,CAAC,CAACoB,KAAK,CAAC,EAAEjB,EAAE,EAAE,GAAG,GAAG,GAAGsB,IAAI,CAACE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACvE,MAAMS,OAAO,GAAG,MAAMpB,MAAM,CAACqB,KAAK,CAAC;MAC/BJ,IAAI;MACJK,KAAK,EAAEV,GAAG;MACVT,KAAK,EAAES,GAAG;MACVM,WAAW;MAAEA,WAAW;MACxBK,UAAU,EAAEN,IAAI;MAChBO,aAAa,EAAEL;IACnB,CAAC,CAAC;IACFL,OAAO,CAACC,GAAG,CAAC,+BAA+B,GAACK,OAAO,CAAC;IACpD,OAAO,MAAMjC,cAAc,CAACiC,OAAO,EAAE/B,cAAc,CAAC;EACtD,CAAC,CAAC,OAAOM,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}