{"ast":null,"code":"import _regeneratorRuntime from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _asyncIterator from \"/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nimport DirSharded from './dir-sharded.js';\nimport DirFlat from './dir-flat.js';\nfunction flatToShard(_x, _x2, _x3, _x4) {\n  return _flatToShard.apply(this, arguments);\n}\nfunction _flatToShard() {\n  _flatToShard = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(child, dir, threshold, options) {\n    var newDir, parent;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            newDir = dir;\n            if (!(dir instanceof DirFlat && dir.directChildrenCount() >= threshold)) {\n              _context.next = 5;\n              break;\n            }\n            _context.next = 4;\n            return convertToShard(dir, options);\n          case 4:\n            newDir = _context.sent;\n          case 5:\n            parent = newDir.parent;\n            if (!parent) {\n              _context.next = 14;\n              break;\n            }\n            if (!(newDir !== dir)) {\n              _context.next = 13;\n              break;\n            }\n            if (child) {\n              child.parent = newDir;\n            }\n            if (newDir.parentKey) {\n              _context.next = 11;\n              break;\n            }\n            throw new Error('No parent key found');\n          case 11:\n            _context.next = 13;\n            return parent.put(newDir.parentKey, newDir);\n          case 13:\n            return _context.abrupt(\"return\", flatToShard(newDir, parent, threshold, options));\n          case 14:\n            return _context.abrupt(\"return\", newDir);\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _flatToShard.apply(this, arguments);\n}\nfunction convertToShard(_x5, _x6) {\n  return _convertToShard.apply(this, arguments);\n}\nfunction _convertToShard() {\n  _convertToShard = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(oldDir, options) {\n    var newDir, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, key, child;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            newDir = new DirSharded({\n              root: oldDir.root,\n              dir: true,\n              parent: oldDir.parent,\n              parentKey: oldDir.parentKey,\n              path: oldDir.path,\n              dirty: oldDir.dirty,\n              flat: false,\n              mtime: oldDir.mtime,\n              mode: oldDir.mode\n            }, options);\n            _iteratorAbruptCompletion = false;\n            _didIteratorError = false;\n            _context2.prev = 3;\n            _iterator = _asyncIterator(oldDir.eachChildSeries());\n          case 5:\n            _context2.next = 7;\n            return _iterator.next();\n          case 7:\n            if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n              _context2.next = 14;\n              break;\n            }\n            _step$value = _step.value, key = _step$value.key, child = _step$value.child;\n            _context2.next = 11;\n            return newDir.put(key, child);\n          case 11:\n            _iteratorAbruptCompletion = false;\n            _context2.next = 5;\n            break;\n          case 14:\n            _context2.next = 20;\n            break;\n          case 16:\n            _context2.prev = 16;\n            _context2.t0 = _context2[\"catch\"](3);\n            _didIteratorError = true;\n            _iteratorError = _context2.t0;\n          case 20:\n            _context2.prev = 20;\n            _context2.prev = 21;\n            if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n              _context2.next = 25;\n              break;\n            }\n            _context2.next = 25;\n            return _iterator.return();\n          case 25:\n            _context2.prev = 25;\n            if (!_didIteratorError) {\n              _context2.next = 28;\n              break;\n            }\n            throw _iteratorError;\n          case 28:\n            return _context2.finish(25);\n          case 29:\n            return _context2.finish(20);\n          case 30:\n            return _context2.abrupt(\"return\", newDir);\n          case 31:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 16, 20, 30], [21,, 25, 29]]);\n  }));\n  return _convertToShard.apply(this, arguments);\n}\nexport default flatToShard;","map":{"version":3,"names":["DirSharded","DirFlat","flatToShard","child","dir","threshold","options","newDir","directChildrenCount","convertToShard","parent","parentKey","Error","put","oldDir","root","path","dirty","flat","mtime","mode","eachChildSeries","key"],"sources":["/Users/macbook/Desktop/BlockChain Projects/Hackerthon/frontend/node_modules/ipfs-unixfs-importer/esm/src/flat-to-shard.js"],"sourcesContent":["import DirSharded from './dir-sharded.js';\nimport DirFlat from './dir-flat.js';\nasync function flatToShard(child, dir, threshold, options) {\n  let newDir = dir;\n  if (dir instanceof DirFlat && dir.directChildrenCount() >= threshold) {\n    newDir = await convertToShard(dir, options);\n  }\n  const parent = newDir.parent;\n  if (parent) {\n    if (newDir !== dir) {\n      if (child) {\n        child.parent = newDir;\n      }\n      if (!newDir.parentKey) {\n        throw new Error('No parent key found');\n      }\n      await parent.put(newDir.parentKey, newDir);\n    }\n    return flatToShard(newDir, parent, threshold, options);\n  }\n  return newDir;\n}\nasync function convertToShard(oldDir, options) {\n  const newDir = new DirSharded({\n    root: oldDir.root,\n    dir: true,\n    parent: oldDir.parent,\n    parentKey: oldDir.parentKey,\n    path: oldDir.path,\n    dirty: oldDir.dirty,\n    flat: false,\n    mtime: oldDir.mtime,\n    mode: oldDir.mode\n  }, options);\n  for await (const {key, child} of oldDir.eachChildSeries()) {\n    await newDir.put(key, child);\n  }\n  return newDir;\n}\nexport default flatToShard;"],"mappings":";;;AAAA,OAAOA,UAAU,MAAM,kBAAkB;AACzC,OAAOC,OAAO,MAAM,eAAe;AAAC,SACrBC,WAAW;EAAA;AAAA;AAAA;EAAA,0EAA1B,iBAA2BC,KAAK,EAAEC,GAAG,EAAEC,SAAS,EAAEC,OAAO;IAAA;IAAA;MAAA;QAAA;UAAA;YACnDC,MAAM,GAAGH,GAAG;YAAA,MACZA,GAAG,YAAYH,OAAO,IAAIG,GAAG,CAACI,mBAAmB,EAAE,IAAIH,SAAS;cAAA;cAAA;YAAA;YAAA;YAAA,OACnDI,cAAc,CAACL,GAAG,EAAEE,OAAO,CAAC;UAAA;YAA3CC,MAAM;UAAA;YAEFG,MAAM,GAAGH,MAAM,CAACG,MAAM;YAAA,KACxBA,MAAM;cAAA;cAAA;YAAA;YAAA,MACJH,MAAM,KAAKH,GAAG;cAAA;cAAA;YAAA;YAChB,IAAID,KAAK,EAAE;cACTA,KAAK,CAACO,MAAM,GAAGH,MAAM;YACvB;YAAC,IACIA,MAAM,CAACI,SAAS;cAAA;cAAA;YAAA;YAAA,MACb,IAAIC,KAAK,CAAC,qBAAqB,CAAC;UAAA;YAAA;YAAA,OAElCF,MAAM,CAACG,GAAG,CAACN,MAAM,CAACI,SAAS,EAAEJ,MAAM,CAAC;UAAA;YAAA,iCAErCL,WAAW,CAACK,MAAM,EAAEG,MAAM,EAAEL,SAAS,EAAEC,OAAO,CAAC;UAAA;YAAA,iCAEjDC,MAAM;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACd;EAAA;AAAA;AAAA,SACcE,cAAc;EAAA;AAAA;AAAA;EAAA,6EAA7B,kBAA8BK,MAAM,EAAER,OAAO;IAAA;IAAA;MAAA;QAAA;UAAA;YACrCC,MAAM,GAAG,IAAIP,UAAU,CAAC;cAC5Be,IAAI,EAAED,MAAM,CAACC,IAAI;cACjBX,GAAG,EAAE,IAAI;cACTM,MAAM,EAAEI,MAAM,CAACJ,MAAM;cACrBC,SAAS,EAAEG,MAAM,CAACH,SAAS;cAC3BK,IAAI,EAAEF,MAAM,CAACE,IAAI;cACjBC,KAAK,EAAEH,MAAM,CAACG,KAAK;cACnBC,IAAI,EAAE,KAAK;cACXC,KAAK,EAAEL,MAAM,CAACK,KAAK;cACnBC,IAAI,EAAEN,MAAM,CAACM;YACf,CAAC,EAAEd,OAAO,CAAC;YAAA;YAAA;YAAA;YAAA,2BACsBQ,MAAM,CAACO,eAAe,EAAE;UAAA;YAAA;YAAA;UAAA;YAAA;cAAA;cAAA;YAAA;YAAA,2BAAvCC,GAAG,eAAHA,GAAG,EAAEnB,KAAK,eAALA,KAAK;YAAA;YAAA,OACpBI,MAAM,CAACM,GAAG,CAACS,GAAG,EAAEnB,KAAK,CAAC;UAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA;cAAA;cAAA;YAAA;YAAA;YAAA;UAAA;YAAA;YAAA;cAAA;cAAA;YAAA;YAAA;UAAA;YAAA;UAAA;YAAA;UAAA;YAAA,kCAEvBI,MAAM;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CACd;EAAA;AAAA;AACD,eAAeL,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}